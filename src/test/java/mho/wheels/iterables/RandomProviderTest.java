package mho.wheels.iterables;

import mho.wheels.misc.Readers;
import org.jetbrains.annotations.NotNull;
import org.junit.Ignore;
import org.junit.Test;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static mho.wheels.iterables.IterableUtils.*;
import static mho.wheels.testing.Testing.*;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.fail;

// @formatter:off
public class RandomProviderTest {
    private static final RandomProvider P = RandomProvider.EXAMPLE;
    private static final int DEFAULT_SAMPLE_SIZE = 1000000;
    private static final int DEFAULT_TOP_COUNT = 10;
    private static final int TINY_LIMIT = 20;

    @Test
    public void testConstructor() {
        RandomProvider provider = new RandomProvider();
        aeq(provider.getScale(), 32);
        aeq(provider.getSecondaryScale(), 8);
    }

    @Test
    public void testConstructor_int() {
        aeq(new RandomProvider(toList(replicate(256, 0))), "RandomProvider[@405143795, 32, 8]");
        aeq(new RandomProvider(toList(IterableUtils.range(1, 256))), "RandomProvider[@87945096, 32, 8]");
        aeq(new RandomProvider(toList(IterableUtils.rangeBy(-1, -1, -256))), "RandomProvider[@-1665377083, 32, 8]");
    }

    @Test
    public void testGetScale() {
        aeq(P.getScale(), 32);
        aeq(new RandomProvider().withScale(100).getScale(), 100);
        aeq(new RandomProvider().withScale(3).getScale(), 3);
    }

    @Test
    public void testGetSecondaryScale() {
        aeq(P.getSecondaryScale(), 8);
        aeq(new RandomProvider().withSecondaryScale(100).getSecondaryScale(), 100);
        aeq(new RandomProvider().withSecondaryScale(3).getSecondaryScale(), 3);
    }

    @Test
    public void testGetSeed() {
        aeq(
                P.getSeed(),
                "[-1740315277, -1661427768, 842676458, -1268128447, -121858045, 1559496322, -581535260, -1819723670," +
                " -334232530, 244755020, -534964695, 301563516, -1795957210, 1451814771, 1299826235, -666749112," +
                " -1729602324, -565031294, 1897952431, 1118663606, -299718943, -1499922009, -837624734, 1439650052," +
                " 312777359, -1140199484, 688524765, 739702138, 1480517762, 1622590976, 835969782, -204259962," +
                " -606452012, -1671898934, 368548728, -333429570, -1477682221, -638975525, -402896626, 1106834480," +
                " -1454735450, 1532680389, 1878326075, 1597781004, 619389131, -898266263, 1900039432, 1228960795," +
                " 1091764975, -1435988581, 1465994011, -241076337, 980038049, -821307198, -25801148, -1278802989," +
                " -290171171, 1063693093, 1718162965, -297113539, -1723402396, 1063795076, 1779331877, 1606303707," +
                " 1342330210, -2115595746, -718013617, 889248973, 1553964562, -2000156621, 1009070370, 998677106," +
                " 309828058, -816607592, 347096084, -565436493, -1836536982, -39909763, -1384351460, 586300570," +
                " -1545743273, -118730601, -1026888351, -643914920, 159473612, -509882909, 2003784095, -1582123439," +
                " 1199200850, -980627072, 589064158, 1351400003, 1083549876, -1039880174, 1634495699, -1583272739," +
                " 1765688283, -316629870, 577895752, -145082312, -645859550, 1496562313, 1970005163, -104842168," +
                " 285710655, 970623004, 375952155, -1114509491, 9760898, 272385973, 1160942220, 79933456, 642681904," +
                " -1291288677, -238849129, 1196057424, -587416967, -2000013062, 953214572, -2003974223, -179005208," +
                " -1599818904, 1963556499, -1494628627, 293535669, -1033907228, 1690848472, 1958730707, 1679864529," +
                " -450182832, -1398178560, 2092043951, 892850383, 662556689, -1954880564, -1297875796, -562200510," +
                " 1753810661, 612072956, -1182875, 294510681, -485063306, 1608426289, 1466734719, 2978810," +
                " -2134449847, 855495682, -1563923271, -306227772, 147934567, 926758908, 1903257258, 1602676310," +
                " -1151393146, 303067731, -1371065668, 1908028886, -425534720, 1241120323, -2101606174, 545122109," +
                " 1781213901, -146337786, -1205949803, -235261172, 1019855899, -193216104, -1286568040, -294909212," +
                " 1086948319, 1903298288, 2119132684, -581936319, -2070422261, 2086926428, -1303966999, -1365365119," +
                " -1891227288, 346044744, 488440551, -790513873, -2045294651, -1270631847, -2126290563, -1816128137," +
                " 1473769929, 784925032, 292983675, -325413283, -2117417065, 1156099828, -1188576148, -1134724577," +
                " 937972245, -924106996, 1553688888, 324720865, 2001615528, 998833644, 137816765, 1901776632," +
                " 2000206935, 942793606, -1742718537, 1909590681, -1332632806, -1355397404, 152253803, -193623640," +
                " 1601921213, -427930872, 1154642563, 1204629137, 581648332, 1921167008, 2054160403, -1709752639," +
                " -402951456, 1597748885, 351809052, -1039041413, 1958075309, 1071372680, 1249922658, -2077011328," +
                " -2088560037, 643876593, -691661336, 2124992669, -534970427, 1061266818, -1731083093, 195764083," +
                " 1773077546, 304479557, 244603812, 834384133, 1684120407, 1493413139, 1731211584, -2062213553," +
                " -270682579, 44310291, 564559440, 957643125, 1374924466, 962420298, 1319979537, 1206138289," +
                " -948832823, -909756549, -664108386, -1355112330, -125435854, -1502071736, -790593389]"
        );
        aeq(
                new RandomProvider(toList(replicate(256, 0))).getSeed(),
                "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0," +
                " 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0," +
                " 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0," +
                " 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0," +
                " 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0," +
                " 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0," +
                " 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0," +
                " 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
        );
        aeq(
                new RandomProvider(toList(IterableUtils.range(1, 256))).getSeed(),
                "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27," +
                " 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51," +
                " 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75," +
                " 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99," +
                " 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118," +
                " 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137," +
                " 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156," +
                " 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175," +
                " 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194," +
                " 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213," +
                " 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232," +
                " 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251," +
                " 252, 253, 254, 255, 256]"
        );
        try {
            new RandomProvider(Collections.emptyList());
            fail();
        } catch (IllegalArgumentException ignored) {}
        try {
            new RandomProvider(Arrays.asList(1, 2, 3));
            fail();
        } catch (IllegalArgumentException ignored) {}
    }

    @Test
    public void testAlt() {
        aeq(P.alt(), "RandomProvider[@-574662335, 32, 8]");
        aeq(new RandomProvider(toList(replicate(256, 0))).alt(), "RandomProvider[@1547733404, 32, 8]");
        aeq(new RandomProvider(toList(IterableUtils.range(1, 256))).alt(), "RandomProvider[@-669351379, 32, 8]");
    }

    @Test
    public void testWithScale() {
        aeq(P.withScale(100), "RandomProvider[@-1084795351, 100, 8]");
        aeq(new RandomProvider(toList(replicate(256, 0))).withScale(3), "RandomProvider[@405143795, 3, 8]");
        aeq(new RandomProvider(toList(IterableUtils.range(1, 256))).withScale(0), "RandomProvider[@87945096, 0, 8]");
    }

    @Test
    public void testWithSecondaryScale() {
        aeq(P.withSecondaryScale(100), "RandomProvider[@-1084795351, 32, 100]");
        aeq(new RandomProvider(toList(replicate(256, 0))).withSecondaryScale(3), "RandomProvider[@405143795, 32, 3]");
        aeq(
                new RandomProvider(toList(IterableUtils.range(1, 256))).withSecondaryScale(0),
                "RandomProvider[@87945096, 32, 0]"
        );
    }

    private static <T> void simpleProviderHelper(
            @NotNull Iterable<T> xs,
            @NotNull String output,
            @NotNull String sampleCountOutput
    ) {
        aeqit(take(TINY_LIMIT, xs), output);
        aeqit(sampleCount(DEFAULT_SAMPLE_SIZE, xs).entrySet(), sampleCountOutput);
    }

    @Test
    public void testBooleans() {
        simpleProviderHelper(
                P.booleans(),
                "[true, false, false, true, false, true, false, false, false, true, true, false, true, false, true," +
                " false, true, true, true, false]",
                "[true=499545, false=500455]"
        );
    }

    @Test
    public void testIntegers() {
        aeqit(
                take(TINY_LIMIT, P.integers()),
                "[-1084795351, 1143001545, -1986160253, -1177145870, -968883275, -1465892161, -470080200," +
                " -2011352603, -248472835, 1997176995, 293205759, -106693423, -1593537177, -206249451, " +
                "565581811," +
                " -195502731, 102870776, -1612587755, -483804495, -831718234]"
        );
    }

    @Test
    public void testLongs() {
        aeqit(
                take(TINY_LIMIT, P.longs()),
                "[-4659160554254839351, -8530493328132264462, -4161321976937299265, -2018979083213524507," +
                " -1067182698272227165, 1259309150092131537, -6844190056086445547, 2429155385556917621," +
                " 441826621316521237, -2077924480219546458, 404281420475794401, -3799772176394282532," +
                " -3259952746839854786, -1600663848124449857, 7874913887470575742, -6974357164754656982," +
                " 8454731288392606713, 347198304573602423, -601743751419410562, -2127248600113938899]"
        );
    }

    private static void uniformSample_Iterable_helper_1(@NotNull String xs, @NotNull String output) {
        aeqit(TINY_LIMIT, P.uniformSample(readIntegerList(xs)), output);
    }

    private static void uniformSample_Iterable_helper_2(@NotNull String xs, @NotNull String output) {
        aeqit(TINY_LIMIT, P.uniformSample(readIntegerListWithNulls(xs)), output);
    }

    @Test
    public void testUniformSample_Iterable() {
        uniformSample_Iterable_helper_1(
                "[3, 1, 4, 1]",
                "[1, 4, 1, 1, 1, 1, 1, 1, 1, 4, 1, 3, 4, 1, 4, 4, 1, 1, 4, 1, ...]"
        );
        uniformSample_Iterable_helper_1("[]", "[]");
        uniformSample_Iterable_helper_2(
                "[3, 1, null, 1]",
                "[1, null, 1, 1, 1, 1, 1, 1, 1, null, 1, 3, null, 1, null, null, 1, 1, null, 1, ...]"
        );
    }

    private static void uniformSample_String_helper(@NotNull String s, @NotNull String output) {
        aeqcs(P.uniformSample(s), output);
    }

    @Test
    public void testUniformSample_String() {
        uniformSample_String_helper(
                "hello",
                "elleeoleleolohlllhlholeeolllllolloelhlooelllhllllolhhllooolllhloohheoeolleeohlhooehhhllhhehllleoell" +
                "eohlehlllhholhollleeheellolll"
        );
        uniformSample_String_helper("", "");
    }

    @Test
    public void testOrderings() {
        simpleProviderHelper(
                P.orderings(),
                "[LT, GT, LT, LT, LT, LT, LT, GT, LT, EQ, GT, GT, GT, LT, GT, LT, GT, LT, EQ, LT]",
                "[LT=333773, GT=333384, EQ=332843]"
        );
    }

    @Test
    public void testRoundingModes() {
        simpleProviderHelper(
                P.roundingModes(),
                "[UP, DOWN, HALF_EVEN, HALF_UP, CEILING, UP, HALF_UP, HALF_UP, HALF_UP, HALF_DOWN, UP, FLOOR," +
                " HALF_DOWN, HALF_EVEN, HALF_DOWN, DOWN, UP, HALF_EVEN, HALF_DOWN, HALF_UP]",
                "[UP=125201, DOWN=124277, HALF_EVEN=125246, HALF_UP=125207, CEILING=125091, HALF_DOWN=125195," +
                " FLOOR=124976, UNNECESSARY=124807]"
        );
    }

    @Test
    public void testPositiveBytes() {
        aeqit(take(TINY_LIMIT, P.positiveBytes()),
                "[41, 73, 3, 114, 53, 63, 56, 101, 125, 35, 127, 81, 103, 21, 115, 117, 120, 21, 49, 38]");
    }

    @Test
    public void testPositiveShorts() {
        aeqit(take(TINY_LIMIT, P.positiveShorts()),
                "[22057, 20937, 6531, 11762, 949, 17087, 9528, 12773, 6909, 163, 30463, 31953, 3431, 25109, 6131," +
                " 23925, 12024, 23829, 15025, 31910]");
    }

    @Test
    public void testPositiveIntegers() {
        aeqit(take(TINY_LIMIT, P.positiveIntegers()),
                "[1143001545, 1997176995, 293205759, 565581811, 102870776, 94129103, 1488978913, 1855658460," +
                " 1833521269, 595157118, 1108943146, 1968520527, 80838404, 181782398, 960691757, 442512834," +
                " 474345991, 896325532, 1936225302, 419244611]");
    }

    @Test
    public void testPositiveLongs() {
        aeqit(take(TINY_LIMIT, P.positiveLongs()),
                "[1259309150092131537, 2429155385556917621, 441826621316521237, 404281420475794401," +
                " 7874913887470575742, 8454731288392606713, 347198304573602423, 1900578154019506034," +
                " 2037300520516627497, 3849688850220341092, 8316024350196968003, 8774587835203863104," +
                " 7027759477968838149, 4582566483620040494, 104407546425062322, 7601919310667137530," +
                " 8935450729811208701, 1568186602409462170, 8008008025538113060, 2525682745804362002]");
    }

    @Test
    public void testNegativeBytes() {
        aeqit(take(TINY_LIMIT, P.negativeBytes()),
                "[-42, -74, -4, -115, -54, -64, -57, -102, -126, -36, -128, -82, -104, -22, -116, -118, -121, -22," +
                " -50, -39]");
    }

    @Test
    public void testNegativeShorts() {
        aeqit(take(TINY_LIMIT, P.negativeShorts()),
                "[-22058, -20938, -6532, -11763, -950, -17088, -9529, -12774, -6910, -164, -30464, -31954, -3432," +
                " -25110, -6132, -23926, -12025, -23830, -15026, -31911]");
    }

    @Test
    public void testNegativeIntegers() {
        aeqit(take(TINY_LIMIT, P.negativeIntegers()),
                "[-1084795351, -1986160253, -1177145870, -968883275, -1465892161, -470080200, -2011352603," +
                " -248472835, -106693423, -1593537177, -206249451, -195502731, -1612587755, -483804495, -831718234," +
                " -884703402, -759016897, -1408421570, -372683595, -138708033]");
    }

    @Test
    public void testNegativeLongs() {
        aeqit(take(TINY_LIMIT, P.negativeLongs()),
                "[-4659160554254839351, -8530493328132264462, -4161321976937299265, -2018979083213524507," +
                " -1067182698272227165, -6844190056086445547, -2077924480219546458, -3799772176394282532," +
                " -3259952746839854786, -1600663848124449857, -6974357164754656982, -601743751419410562," +
                " -2127248600113938899, -8615999285391660475, -3152269795703421596, -279738421105985993," +
                " -9128636656372363642, -4787870135943121859, -4018571045884316278, -3622924013254235408]");
    }

    @Test
    public void testNaturalBytes() {
        aeqit(take(TINY_LIMIT, P.naturalBytes()),
                "[41, 73, 3, 114, 53, 63, 56, 101, 125, 35, 127, 81, 103, 21, 115, 117, 120, 21, 49, 38]");
    }

    @Test
    public void testNaturalShorts() {
        aeqit(take(TINY_LIMIT, P.naturalShorts()),
                "[22057, 20937, 6531, 11762, 949, 17087, 9528, 12773, 6909, 163, 30463, 31953, 3431, 25109, 6131," +
                " 23925, 12024, 23829, 15025, 31910]");
    }

    @Test
    public void testNaturalIntegers() {
        aeqit(take(TINY_LIMIT, P.naturalIntegers()),
                "[1062688297, 1143001545, 161323395, 970337778, 1178600373, 681591487, 1677403448, 136131045," +
                " 1899010813, 1997176995, 293205759, 2040790225, 553946471, 1941234197, 565581811, 1951980917," +
                " 102870776, 534895893, 1663679153, 1315765414]");
    }

    @Test
    public void testNaturalLongs() {
        aeqit(take(TINY_LIMIT, P.naturalLongs()),
                "[4564211482599936457, 692878708722511346, 5062050059917476543, 7204392953641251301," +
                " 8156189338582548643, 1259309150092131537, 2379181980768330261, 2429155385556917621," +
                " 441826621316521237, 7145447556635229350, 404281420475794401, 5423599860460493276," +
                " 5963419290014921022, 7622708188730325951, 7874913887470575742, 2249014872100118826," +
                " 8454731288392606713, 347198304573602423, 8621628285435365246, 7096123436740836909]");
    }

    @Test
    public void testNonzeroBytes() {
        aeqit(take(TINY_LIMIT, P.nonzeroBytes()),
                "[41, -55, -125, -14, -75, -65, 56, -27, -3, -93, -1, -47, 103, 21, -13, 117, -8, 21, -79, -90]");
    }

    @Test
    public void testNonzeroShorts() {
        aeqit(take(TINY_LIMIT, P.nonzeroShorts()),
                "[22057, -11831, -26237, 11762, 949, 17087, 9528, 12773, -25859, -32605, -2305, -815, -29337, -7659," +
                " 6131, -8843, -20744, -8939, -17743, -858]");
    }

    @Test
    public void testNonzeroIntegers() {
        aeqit(take(TINY_LIMIT, P.nonzeroIntegers()),
                "[-1084795351, 1143001545, -1986160253, -1177145870, -968883275, -1465892161, -470080200," +
                " -2011352603, -248472835, 1997176995, 293205759, -106693423, -1593537177, -206249451, 565581811," +
                " -195502731, 102870776, -1612587755, -483804495, -831718234]");
    }

    @Test
    public void testNonzeroLongs() {
        aeqit(take(TINY_LIMIT, P.nonzeroLongs()),
                "[-4659160554254839351, -8530493328132264462, -4161321976937299265, -2018979083213524507," +
                " -1067182698272227165, 1259309150092131537, -6844190056086445547, 2429155385556917621," +
                " 441826621316521237, -2077924480219546458, 404281420475794401, -3799772176394282532," +
                " -3259952746839854786, -1600663848124449857, 7874913887470575742, -6974357164754656982," +
                " 8454731288392606713, 347198304573602423, -601743751419410562, -2127248600113938899]");
    }

    @Test
    public void testBytes() {
        aeqit(take(TINY_LIMIT, P.bytes()),
                "[41, -55, -125, -14, -75, -65, 56, -27, -3, -93, -1, -47, 103, 21, -13, 117, -8, 21, -79, -90]");
    }

    @Test
    public void testShorts() {
        aeqit(take(TINY_LIMIT, P.shorts()),
                "[22057, -11831, -26237, 11762, 949, 17087, 9528, 12773, -25859, -32605, -2305, -815, -29337, -7659," +
                " 6131, -8843, -20744, -8939, -17743, -858]");
    }

    @Test
    public void testAsciiCharacters() {
        aeqcs(P.asciiCharacters(),
                ")I\3r5?8e}#\177Qg\25sux\u00151&OaV\\?>5?u~\34*Oy\4w?~+-Br\7)\34d\26CLERd%@c7\2\5o.\u001c2S\6z=Vz\30" +
                "}l\nNph\32Xx^$x.\23\22\3oK10)\177u;\u001c2nEZF\17If`5f\23OSS\5\3v\5s\u000b2Y\\oKo;\1|CQ7&");
    }

    @Test
    public void testCharacters() {
        aeqcs(P.characters(),
                "嘩퇉馃\u2df2ε䊿\u2538\u31e5髽肣\uf6ffﳑ赧\ue215\u17f3\udd75껸\udd15몱ﲦ䯏ϡ罖\u19dc刿ㄾ䲵箿偵恾ᬜK" +
                "㵏ꏹ缄㩷ⴿ읾纫\ufe2d㗂䝲\uf207갩힜坤琖\u2a43퉌\uea45\ue352蕤餥䉀\u2b63\uf637鸂鸅误輮\uee1c\u33b2酓캆ᅺ됽煖䇺ᤘ" +
                "\ue9fd\u2aec㖊짎\uaaf0全覚돘䱸\u28de\u2e24\uf878ሮܓ鄒\uff03띯\ue5cb\ua7b1聆尩굿\uecf5ꪻ疜\ue8b2빮빅\ue2da䟆" +
                "\ue78f㱉泦㭠瀵컦刓嗏\u3353\ue2d3\ud805ឃᳶ쪅右䦋\u2832ﭙ빜䫯噋\uf36fꌻ躁\ue87c홃祝몷ࢦ");
    }

    private static void rangeUp_byte_helper(byte a, @NotNull String output) {
        aeqit(take(TINY_LIMIT, P.rangeUp(a)), output);
    }

    @Test
    public void testRangeUp_byte() {
        rangeUp_byte_helper(
                (byte) 0,
                "[41, 73, 3, 114, 53, 63, 56, 101, 125, 35, 127, 81, 103, 21, 115, 117, 120, 21, 49, 38]"
        );
        rangeUp_byte_helper(
                (byte) (1 << 6),
                "[105, 73, 67, 114, 117, 127, 120, 101, 125, 99, 127, 81, 103, 85, 115, 117, 120, 85, 113, 102]"
        );
        rangeUp_byte_helper(
                (byte) (-1 << 6),
                "[-23, 67, 117, 127, -8, 99, 39, -43, 53, -43, 113, 102, 22, -1, -2, 117, 127, 53, 62, -36]"
        );
        rangeUp_byte_helper(
                Byte.MAX_VALUE,
                "[127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127]"
        );
        rangeUp_byte_helper(
                Byte.MIN_VALUE,
                "[-87, 73, 3, 114, 53, 63, -72, 101, 125, 35, 127, 81, -25, -107, 115, -11, 120, -107, 49, 38]"
        );
    }

    private static void rangeUp_short_helper(short a, @NotNull String output) {
        aeqit(take(TINY_LIMIT, P.rangeUp(a)), output);
    }

    @Test
    public void testRangeUp_short() {
        rangeUp_short_helper(
                (short) 0,
                "[22057, 20937, 6531, 11762, 949, 17087, 9528, 12773, 6909, 163, 30463, 31953, 3431, 25109, 6131," +
                " 23925, 12024, 23829, 15025, 31910]"
        );
        rangeUp_short_helper(
                (short) (1 << 14),
                "[22057, 20937, 22915, 28146, 17333, 17087, 25912, 29157, 23293, 16547, 30463, 31953, 19815, 25109," +
                " 22515, 23925, 28408, 23829, 31409, 31910]"
        );
        rangeUp_short_helper(
                (short) (-1 << 14),
                "[5673, 22915, -4622, -15435, 703, -6856, -3611, 23293, 16547, 19815, -10253, 28408, 31409, 3023," +
                " -15391, 16214, -9764, 4671, -3778, 3253]"
        );
        rangeUp_short_helper(
                Short.MAX_VALUE,
                "[32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767," +
                " 32767, 32767, 32767, 32767, 32767, 32767]"
        );
        rangeUp_short_helper(
                Short.MIN_VALUE,
                "[-10711, 20937, 6531, -21006, -31819, -15681, -23240, -19995, 6909, 163, 30463, 31953, 3431, 25109," +
                " -26637, 23925, 12024, 23829, 15025, 31910]"
        );
    }

    private static void rangeUp_int_helper(int a, @NotNull String output) {
        aeqit(take(TINY_LIMIT, P.rangeUp(a)), output);
    }

    @Test
    public void testRangeUp_int() {
        rangeUp_int_helper(
                0,
                "[1143001545, 970337778, 681591487, 136131045, 1997176995, 2040790225, 1941234197, 1951980917," +
                " 534895893, 1315765414, 1488978913, 1855658460, 739062078, 2008775615, 595157118, 1108943146," +
                " 1275438073, 985283191, 181782398, 960691757]"
        );
        rangeUp_int_helper(
                1 << 30,
                "[1143001545, 2044079602, 1755333311, 1209872869, 1997176995, 2040790225, 1941234197, 1951980917," +
                " 1608637717, 1315765414, 1488978913, 1855658460, 1812803902, 2008775615, 1668898942, 1108943146," +
                " 1275438073, 2059025015, 1255524222, 2034433581]"
        );
        rangeUp_int_helper(
                -1 << 30,
                "[69259721, 2044079602, 1755333311, 1209872869, 923435171, 1608637717, 415237089, 781916636," +
                " 1812803902, -478584706, 35201322, 2059025015, -891959426, -113050067, 1109175337, -654497213," +
                " 1765141061, 1055360356, 936002112, 468907575]"
        );
        rangeUp_int_helper(
                Integer.MAX_VALUE,
                "[2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647," +
                " 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647," +
                " 2147483647, 2147483647, 2147483647, 2147483647]"
        );
        rangeUp_int_helper(
                Integer.MIN_VALUE,
                "[-1004482103, 970337778, 681591487, 136131045, -150306653, 2040790225, 1941234197, 1951980917," +
                " 534895893, 1315765414, -658504735, -291825188, 739062078, 2008775615, -1552326530, " +
                "-1038540502, 1275438073, 985283191, -1965701250, -1186791891]"
        );
    }

    private static void rangeUp_long_helper(long a, @NotNull String output) {
        aeqit(take(TINY_LIMIT, P.rangeUp(a)), output);
    }

    @Test
    public void testRangeUp_long() {
        rangeUp_long_helper(
                0L,
                "[2978664684788457540, 259411669349684921, 3819968131296829608, 4045916796483607944," +
                " 9050600215542762103, 9220690404532069369, 7461625247526204659, 8293297493653674228," +
                " 8695924240519389599, 3583222511262526670, 5713832101313495128, 6232776051665771374," +
                " 4562923580722056620, 3840666588017310711, 8453337235194935587, 2025272514667682114," +
                " 5709813867763402188, 324207515304377018, 4552478380255597834, 3134077502549279289]"
        );
        rangeUp_long_helper(
                1L << 62,
                "[7590350703215845444, 4871097687777072825, 8431654149724217512, 8657602814910995848," +
                " 9050600215542762103, 9220690404532069369, 7461625247526204659, 8293297493653674228," +
                " 8695924240519389599, 8194908529689914574, 5713832101313495128, 6232776051665771374," +
                " 9174609599149444524, 8452352606444698615, 8453337235194935587, 6636958533095070018," +
                " 5709813867763402188, 4935893533731764922, 9164164398682985738, 7745763520976667193]"
        );
        rangeUp_long_helper(
                -1L << 62,
                "[1609966265326126211, -1308654454609754433, -1874654246358644483, 4614632709429989841," +
                " 5549737756197188595, 8802817253011410639, -4341372912259511332, 1351874002717355189," +
                " 4304305952112864638, -2650756327368211889, 7135333504334759031, -1322097316696094037," +
                " 1669389700406211395, 5037133408195934528, -1504487908198687998, 6789092804704878382," +
                " 3566685953462311704, 5270340593672846712, -1719689906509449096, -3246513607960354030]"
        );
        rangeUp_long_helper(
                Long.MAX_VALUE,
                "[9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807," +
                " 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807," +
                " 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807," +
                " 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807," +
                " 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807]"
        );
        rangeUp_long_helper(
                Long.MIN_VALUE,
                "[-3001719753101261693, -5920340473037142337, -6486340264786032387, 2946691002601937," +
                " 938051737769800691, 6726395392388302357, 4191131234584022735, -8953058930686899236," +
                " -3259812015710032715, -307380066314523266, -7262442345795599793, 2523647485907371127," +
                " -5933783335123481941, 9097897703523752562, 8234018459023606428, -2942296318021176509," +
                " 5939553317435058514, 425447389768546624, -6116173926626075902, 2177406786277490478]"
        );
    }

    private static void rangeUp_char_helper(char a, @NotNull String output) {
        aeqcs(P.rangeUp(a), output);
    }

    @Test
    public void testRangeUp_char() {
        rangeUp_char_helper(
                '\0',
                "嘩퇉馃\u2df2ε䊿\u2538\u31e5髽肣\uf6ffﳑ赧\ue215\u17f3\udd75껸\udd15몱ﲦ䯏ϡ罖\u19dc刿ㄾ䲵箿偵" +
                "恾ᬜK㵏ꏹ缄㩷ⴿ읾纫\ufe2d㗂䝲\uf207갩힜坤琖\u2a43퉌\uea45\ue352蕤餥䉀\u2b63\uf637鸂鸅误輮\uee1c\u33b2酓캆ᅺ됽煖" +
                "䇺ᤘ\ue9fd\u2aec㖊짎\uaaf0全覚돘䱸\u28de\u2e24\uf878ሮܓ鄒\uff03띯\ue5cb\ua7b1聆尩굿\uecf5ꪻ疜\ue8b2빮빅" +
                "\ue2da䟆\ue78f㱉泦㭠瀵컦刓嗏\u3353\ue2d3\ud805ឃᳶ쪅右䦋\u2832ﭙ빜䫯噋\uf36fꌻ躁\ue87c홃祝몷ࢦ"
        );
        rangeUp_char_helper(
                'a',
                "嚊툪駤\u2e53Ж䌠\u2599\u3246魞脄\uf760ﴲ跈\ue276ᡔ\uddd6꽙\udd76묒ﴇ䰰т羷ᨽ加\u319f䴖簠僖惟\u1b7d\u218b㶰ꑚ罥" +
                "㫘ⶠ쟟缌ﺎ㘣䟓\uf268겊\ud7fd埅瑷\u2aa4튭\ueaa6\ue3b3藅馆䊡\u2bc4\uf698鹣鹦豐辏\uee7d㐓醴컧ᇛ뒞熷䉛\u1979" +
                "\uea5e\u2b4d㗫쨯\uab51凉觻됹䳙\u293f\u2e85\uf8d9\u128fݴ酳\uff64럐\ue62cꠒ﨑岊균\ued56\uab1c痽\ue913뻏뺦" +
                "\ue33b䠧\ue7f0㲪浇㯁炖콇剴嘰\u33b4\ue334\ud866\u17e4ᵗ쫦呔䧬\u2893\ufbba뺽䭐嚬\uf3d0ꎜ転\ue8dd횤者묘इ"
        );
        rangeUp_char_helper(
                'Ш',
                "婑헱鶫\u321aߝ䛧\u2960㘍鼥蓋ﬧ醏\ue63dᰛ\ue19d댠\ue13d뻙俷ࠉ荾Ḅ噧㕦僝翧咝撦ὄ\u2552䅷ꠡ茬㺟ㅧ쮦苓㧪䮚\uf62f끑" +
                "\udbc4完砾\u2e6b홴\uee6d\ue77a覌鵍䙨\u2f8b著ꈪꈭ逗鍖\uf244㟚镻튮ᖢ롥畾䘢ᵀ\uee25\u2f14㦲췶꼘喐跂렀傠ⴆ\u324cﲠᙖ" +
                "\u0b3b锺뮗\ue9f3ꯙ\ufdd8恑놧\uf11d껣秄\uecda슖쉭\ue702䯮\uebb7䁱焎㾈瑝팎嘻姷㝻\ue6fb\udc2d\u1bab\u211e캭堛䶳" +
                "ⱚﾁ슄众婳\uf797ꝣ銩\ueca4\uda6bﹹ뻟\u0cce耚\uf0adᓦၽ"
        );
        rangeUp_char_helper(
                Character.MAX_VALUE,
                "\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff" +
                "\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff" +
                "\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff" +
                "\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff" +
                "\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff" +
                "\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff" +
                "\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff" +
                "\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff\uffff"
        );
    }

    private static void rangeDown_byte_helper(byte a, @NotNull String output) {
        aeqit(take(TINY_LIMIT, P.rangeDown(a)), output);
    }

    @Test
    public void testRangeDown_byte() {
        rangeDown_byte_helper(
                (byte) 0,
                "[-87, -72, -25, -107, -11, -107, -42, -65, -66, -11, -2, -100, -86, -49, -124, -9, -65, -2, -83, -14]"
        );
        rangeDown_byte_helper(
                (byte) (1 << 6),
                "[-87, 3, 53, 63, -72, 35, -25, -107, -11, -107, 49, 38, -42, -65, -66, 53, 63, -11, -2, -100]"
        );
        rangeDown_byte_helper(
                (byte) (-1 << 6),
                "[-87, -125, -75, -65, -72, -93, -107, -107, -79, -90, -65, -66, -75, -65, -100, -86, -124, -65," +
                " -85, -83]"
        );
        rangeDown_byte_helper(
                Byte.MAX_VALUE,
                "[-87, 73, 3, 114, 53, 63, -72, 101, 125, 35, 127, 81, -25, -107, 115, -11, 120, -107, 49, 38]"
        );
        rangeDown_byte_helper(
                Byte.MIN_VALUE,
                "[-128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128," +
                " -128, -128, -128, -128]"
        );
    }

    private static void rangeDown_short_helper(short a, @NotNull String output) {
        aeqit(take(TINY_LIMIT, P.rangeDown(a)), output);
    }

    @Test
    public void testRangeDown_short() {
        rangeDown_short_helper(
                (short) 0,
                "[-10711, -21006, -31819, -15681, -23240, -19995, -26637, -13361, -31775, -170, -26148, -11713," +
                " -20162, -13131, -1089, -12171, -8066, -25828, -24278, -17073]"
        );
        rangeDown_short_helper(
                (short) (1 << 14),
                "[-10711, 6531, -21006, -31819, -15681, -23240, -19995, 6909, 163, 3431, -26637, 12024, 15025," +
                " -13361, -31775, -170, -26148, -11713, -20162, -13131]"
        );
        rangeDown_short_helper(
                (short) (-1 << 14),
                "[-26237, -21006, -31819, -23240, -19995, -25859, -32605, -29337, -26637, -20744, -17743, -31775," +
                " -26148, -20162, -25828, -24278, -17073, -23559, -17801, -21185]"
        );
        rangeDown_short_helper(
                Short.MAX_VALUE,
                "[-10711, 20937, 6531, -21006, -31819, -15681, -23240, -19995, 6909, 163, 30463, 31953, 3431, 25109," +
                " -26637, 23925, 12024, 23829, 15025, 31910]"
        );
        rangeDown_short_helper(
                Short.MIN_VALUE,
                "[-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768," +
                " -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]"
        );
    }

    private static void rangeDown_int_helper(int a, @NotNull String output) {
        aeqit(take(TINY_LIMIT, P.rangeDown(a)), output);
    }

    @Test
    public void testRangeDown_int() {
        rangeDown_int_helper(
                0,
                "[-1004482103, -150306653, -658504735, -291825188, -1552326530, -1038540502, -1965701250," +
                " -1186791891, -1728239037, -18381468, -137739712, -604834249, -1131859022, -1686158854," +
                " -1782600976, -2111534694, -1846406610, -553610990, -96510935, -2032484754]"
        );
        rangeDown_int_helper(
                1 << 30,
                "[-1004482103, 970337778, 681591487, 136131045, -150306653, 534895893, -658504735, -291825188," +
                " 739062078, -1552326530, -1038540502, 985283191, -1965701250, -1186791891, 35433513, -1728239037," +
                " 691399237, -18381468, -137739712, -604834249]"
        );
        rangeDown_int_helper(
                -1 << 30,
                "[-1177145870, -1465892161, -2011352603, -1612587755, -1408421570, -1552326530, -1162200457," +
                " -1965701250, -1186791891, -2112050135, -1728239037, -1456084411, -1288200699, -1131859022," +
                " -1655648634, -2073512899, -1686158854, -1782600976, -2111534694, -1846406610]"
        );
        rangeDown_int_helper(
                Integer.MAX_VALUE,
                "[-1004482103, 970337778, 681591487, 136131045, -150306653, 2040790225, 1941234197, 1951980917," +
                " 534895893, 1315765414, -658504735, -291825188, 739062078, 2008775615, -1552326530, -1038540502," +
                " 1275438073, 985283191, -1965701250, -1186791891]"
        );
        rangeDown_int_helper(
                Integer.MIN_VALUE,
                "[-2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648," +
                " -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648," +
                " -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648]"
        );
    }

    private static void rangeDown_long_helper(long a, @NotNull String output) {
        aeqit(take(TINY_LIMIT, P.rangeDown(a)), output);
    }

    @Test
    public void testRangeDown_long() {
        rangeDown_long_helper(
                0L,
                "[-3001719753101261693, -5920340473037142337, -6486340264786032387, -8953058930686899236," +
                " -3259812015710032715, -307380066314523266, -7262442345795599793, -5933783335123481941," +
                " -2942296318021176509, -6116173926626075902, -1045000064965076200, -6331375924936837000," +
                " -7858199626387741934, -750497281407653010, -4964572946333319706, -3265594823497196973," +
                " -7169158286100765709, -3899242950132782503, -354726065181537090, -8326391862079061231]"
        );
        rangeDown_long_helper(
                1L << 62,
                "[-3001719753101261693, -5920340473037142337, -6486340264786032387, 2946691002601937," +
                " 938051737769800691, 4191131234584022735, -8953058930686899236, -3259812015710032715," +
                " -307380066314523266, -7262442345795599793, 2523647485907371127, -5933783335123481941," +
                " -2942296318021176509, 425447389768546624, -6116173926626075902, 2177406786277490478," +
                " -1045000064965076200, 658654575245458808, -6331375924936837000, -7858199626387741934]"
        );
        rangeDown_long_helper(
                -1L << 62,
                "[-6244707352066318268, -8963960367505090887, -5403403905557946200, -5177455240371167864," +
                " -5640149525592249138, -4660448456132719188, -5382705448837465097, -7198099522187093694," +
                " -8899164521550398790, -4670893656599177974, -6089294534305496519, -8650775946964755326," +
                " -7145123307227501859, -7605339026464506600, -6513958261454878089, -9034634951682803789," +
                " -7138643007725401796, -7486951269179234622, -7852292981010661281, -8935306705831985167]"
        );
        rangeDown_long_helper(
                Long.MAX_VALUE,
                "[-3001719753101261693, -5920340473037142337, -6486340264786032387, 2946691002601937," +
                " 938051737769800691, 6726395392388302357, 4191131234584022735, -8953058930686899236," +
                " -3259812015710032715, -307380066314523266, -7262442345795599793, 2523647485907371127," +
                " -5933783335123481941, 9097897703523752562, 8234018459023606428, -2942296318021176509," +
                " 5939553317435058514, 425447389768546624, -6116173926626075902, 2177406786277490478]"
        );
        rangeDown_long_helper(
                Long.MIN_VALUE,
                "[-9223372036854775808, -9223372036854775808, -9223372036854775808, -9223372036854775808," +
                " -9223372036854775808, -9223372036854775808, -9223372036854775808, -9223372036854775808," +
                " -9223372036854775808, -9223372036854775808, -9223372036854775808, -9223372036854775808," +
                " -9223372036854775808, -9223372036854775808, -9223372036854775808, -9223372036854775808," +
                " -9223372036854775808, -9223372036854775808, -9223372036854775808, -9223372036854775808]"
        );
    }

    private static void rangeDown_char_helper(char a, @NotNull String output) {
        aeqcs(P.rangeDown(a), output);
    }

    @Test
    public void testRangeDown_char() {
        rangeDown_char_helper(
                '\0',
                "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0" +
                "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0" +
                "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
        );
        rangeDown_char_helper(
                'a',
                ")I\u00035?8#Q\25\u00151&OaV\\?>5?\34*O\4?+-B\7)\34\26CLER%@7\2\5.\u001c2S\6=V\30\nN\32X^$.\23\22\3K" +
                "10);\u001c2EZF\17I`5\23OSS\5\3\5\u000b2Y\\K;\1CQ7&W\5>U7\21(Y\2+'\32\24V<T@)B\2?3+\6\u00129CZ\35BW" +
                "\\FF\13[J"
        );
        rangeDown_char_helper(
                'Ш',
                "ǉƃεʿǥ\u02fd£ȕʱϏϡǜȿľοu~\u031cĪϹɷȇЖɃɌɅ\u0352ĥɀ\u0363ϯβœźŖǺĘǽˬǎ\u02f0ŨƚϘÞxȮĒưʻ²\u02da\u03605ȓ\u0353" +
                "\u02d3\5ʅϳƋ2\u0359\u02ef\u036f\u033b|ɑʷ¦ϲ¾·\21ΨÙɨŔ\u0329ο\u0306\u0092\u0339σŚ\u036bBɗŪŤͽЋɵÊ\u037eʡɪ" +
                "\35\u0366țǆɐʓΤǔȪĢͽ¬ü\u0300\u009bϖɕǆĖƣ,\u02d6ǌ\u02f7\3ɌÄʓϨͺɎ"
        );
        rangeDown_char_helper(
                Character.MAX_VALUE,
                "嘩퇉馃\u2df2ε䊿\u2538\u31e5髽肣\uf6ffﳑ赧\ue215\u17f3\udd75껸\udd15몱ﲦ䯏ϡ罖\u19dc刿ㄾ䲵箿偵恾ᬜK㵏ꏹ缄㩷" +
                "ⴿ읾纫\ufe2d㗂䝲\uf207갩힜坤琖\u2a43퉌\uea45\ue352蕤餥䉀\u2b63\uf637鸂鸅误輮\uee1c\u33b2酓캆ᅺ됽煖䇺ᤘ\ue9fd" +
                "\u2aec㖊짎\uaaf0全覚돘䱸\u28de\u2e24\uf878ሮܓ鄒\uff03띯\ue5cb\ua7b1聆尩굿\uecf5ꪻ疜\ue8b2빮빅\ue2da䟆\ue78f" +
                "㱉泦㭠瀵컦刓嗏\u3353\ue2d3\ud805ឃᳶ쪅右䦋\u2832ﭙ빜䫯噋\uf36fꌻ躁\ue87c홃祝몷ࢦ"
        );
    }

    private static void range_byte_byte_helper(byte a, byte b, @NotNull String output) {
        aeqit(TINY_LIMIT, P.range(a, b), output);
    }

    @Test
    public void testRange_byte_byte() {
        range_byte_byte_helper(
                (byte) 10,
                (byte) 20,
                "[19, 19, 13, 12, 15, 18, 15, 13, 11, 17, 15, 13, 15, 18, 15, 11, 16, 11, 16, 15, ...]"
        );
        range_byte_byte_helper(
                (byte) 10,
                (byte) 10,
                "[10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, ...]"
        );
        range_byte_byte_helper((byte) 10, (byte) 9, "[]");
        range_byte_byte_helper(
                (byte) -20,
                (byte) -10,
                "[-11, -11, -17, -18, -15, -12, -15, -17, -19, -13, -15, -17, -15, -12, -15, -19, -14, -19, -14," +
                " -15, ...]"
        );
        range_byte_byte_helper(
                (byte) -20,
                (byte) -20,
                "[-20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20," +
                " -20, ...]"
        );
        range_byte_byte_helper((byte) -20, (byte) -21, "[]");
        range_byte_byte_helper(
                (byte) 0,
                (byte) 0,
                "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...]"
        );
        range_byte_byte_helper(
                (byte) 0,
                (byte) 10,
                "[9, 9, 3, 2, 5, 8, 5, 3, 1, 7, 5, 3, 5, 8, 5, 1, 6, 1, 6, 5, ...]"
        );
        range_byte_byte_helper(
                (byte) -5,
                (byte) 0,
                "[-4, -4, -2, -3, 0, -5, 0, 0, -2, -4, 0, -2, 0, -5, 0, -4, -4, -1, 0, 0, ...]"
        );
        range_byte_byte_helper(
                (byte) -5,
                (byte) 10,
                "[4, 4, -2, -3, 0, 10, 3, 0, 8, -2, 10, -4, 2, 0, -2, 0, 3, 0, -4, 1, ...]"
        );
        range_byte_byte_helper(
                (byte) -10,
                (byte) 5,
                "[-1, -1, -7, -8, -5, 5, -2, -5, 3, -7, 5, -9, -3, -5, -7, -5, -2, -5, -9, -4, ...]"
        );
        range_byte_byte_helper((byte) 5, (byte) -10, "[]");
    }

    private static void range_short_short_helper(short a, short b, @NotNull String output) {
        aeqit(TINY_LIMIT, P.range(a, b), output);
    }

    @Test
    public void testRange_short_short() {
        range_short_short_helper(
                (short) 10,
                (short) 20,
                "[19, 19, 13, 12, 15, 18, 15, 13, 11, 17, 15, 13, 15, 18, 15, 11, 16, 11, 16, 15, ...]"
        );
        range_short_short_helper(
                (short) 10,
                (short) 10,
                "[10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, ...]"
        );
        range_short_short_helper((short) 10, (short) 9, "[]");
        range_short_short_helper(
                (short) -20,
                (short) -10,
                "[-11, -11, -17, -18, -15, -12, -15, -17, -19, -13, -15, -17, -15, -12, -15, -19, -14, -19, -14," +
                " -15, ...]"
        );
        range_short_short_helper(
                (short) -20,
                (short) -20,
                "[-20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20," +
                " -20, ...]"
        );
        range_short_short_helper((short) -20, (short) -21, "[]");
        range_short_short_helper(
                (short) 0,
                (short) 0,
                "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...]"
        );
        range_short_short_helper(
                (short) 0,
                (short) 10,
                "[9, 9, 3, 2, 5, 8, 5, 3, 1, 7, 5, 3, 5, 8, 5, 1, 6, 1, 6, 5, ...]"
        );
        range_short_short_helper(
                (short) -5,
                (short) 0,
                "[-4, -4, -2, -3, 0, -5, 0, 0, -2, -4, 0, -2, 0, -5, 0, -4, -4, -1, 0, 0, ...]"
        );
        range_short_short_helper(
                (byte) -5,
                (byte) 10,
                "[4, 4, -2, -3, 0, 10, 3, 0, 8, -2, 10, -4, 2, 0, -2, 0, 3, 0, -4, 1, ...]"
        );
        range_short_short_helper(
                (short) -10,
                (short) 5,
                "[-1, -1, -7, -8, -5, 5, -2, -5, 3, -7, 5, -9, -3, -5, -7, -5, -2, -5, -9, -4, ...]"
        );
        range_short_short_helper((short) 5, (short) -10, "[]");
    }

    private static void range_int_int_helper(int a, int b, @NotNull String output) {
        aeqit(TINY_LIMIT, P.range(a, b), output);
    }

    @Test
    public void testRange_int_int() {
        range_int_int_helper(
                10,
                20,
                "[19, 12, 15, 13, 11, 15, 15, 15, 16, 11, 20, 19, 17, 12, 19, 14, 13, 15, 14, 10, ...]"
        );
        range_int_int_helper(
                10,
                10,
                "[10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, ...]"
        );
        range_int_int_helper(10, 9, "[]");
        range_int_int_helper(
                -20,
                -10,
                "[-11, -18, -15, -17, -19, -15, -15, -15, -14, -19, -10, -11, -13, -18, -11, -16, -17, -15, -16," +
                " -20, ...]"
        );
        range_int_int_helper(
                -20,
                -20,
                "[-20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20," +
                " -20, ...]"
        );
        range_int_int_helper(-20, -21, "[]");
        range_int_int_helper(0, 0, "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...]");
        range_int_int_helper(0, 10, "[9, 2, 5, 3, 1, 5, 5, 5, 6, 1, 10, 9, 7, 2, 9, 4, 3, 5, 4, 0, ...]");
        range_int_int_helper(-5, 0, "[-4, -3, 0, -2, -4, 0, 0, 0, -4, -1, -3, -4, 0, -3, -4, -1, -2, 0, -1, -5, ...]");
        range_int_int_helper(-5, 10, "[4, -3, 10, 0, -2, -4, 0, 0, 0, 1, -4, 7, 9, 10, 9, 5, 4, 2, 9, 8, ...]");
        range_int_int_helper(-10, 5, "[-1, -8, 5, -5, -7, -9, -5, -5, -5, -4, -9, 2, 4, 5, 4, 0, -1, -3, 4, 3, ...]");
        range_int_int_helper(5, -10, "[]");
    }

    private static void range_long_long_helper(long a, long b, @NotNull String output) {
        aeqit(TINY_LIMIT, P.range(a, b), output);
    }

    @Test
    public void testRange_long_long() {
        range_long_long_helper(
                10L,
                20L,
                "[19, 19, 13, 12, 15, 18, 15, 13, 11, 17, 15, 13, 15, 18, 15, 11, 16, 11, 16, 15, ...]"
        );
        range_long_long_helper(
                10L,
                10L,
                "[10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, ...]"
        );
        range_long_long_helper(10L, 9L, "[]");
        range_long_long_helper(
                -20L,
                -10L,
                "[-11, -11, -17, -18, -15, -12, -15, -17, -19, -13, -15, -17, -15, -12, -15, -19, -14, -19, -14," +
                " -15, ...]"
        );
        range_long_long_helper(
                -20L,
                -20L,
                "[-20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20," +
                " -20, ...]"
        );
        range_long_long_helper(-20L, -21L, "[]");
        range_long_long_helper(0L, 0L, "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...]");
        range_long_long_helper(0L, 10L, "[9, 9, 3, 2, 5, 8, 5, 3, 1, 7, 5, 3, 5, 8, 5, 1, 6, 1, 6, 5, ...]");
        range_long_long_helper(
                -5L,
                0L,
                "[-4, -4, -2, -3, 0, -5, 0, 0, -2, -4, 0, -2, 0, -5, 0, -4, -4, -1, 0, 0, ...]"
        );
        range_long_long_helper(-5L, 10L, "[4, 4, -2, -3, 0, 10, 3, 0, 8, -2, 10, -4, 2, 0, -2, 0, 3, 0, -4, 1, ...]");
        range_long_long_helper(
                -10L,
                5L,
                "[-1, -1, -7, -8, -5, 5, -2, -5, 3, -7, 5, -9, -3, -5, -7, -5, -2, -5, -9, -4, ...]"
        );
        range_long_long_helper(5L, -10L, "[]");
    }

    private static void range_BigInteger_BigInteger_helper(int a, int b, @NotNull String output) {
        aeqit(TINY_LIMIT, P.range(BigInteger.valueOf(a), BigInteger.valueOf(b)), output);
    }

    @Test
    public void testRange_BigInteger_BigInteger() {
        range_BigInteger_BigInteger_helper(
                10,
                20,
                "[19, 19, 13, 12, 15, 18, 15, 13, 11, 17, 15, 13, 15, 18, 15, 11, 16, 11, 16, 15, ...]"
        );
        range_BigInteger_BigInteger_helper(
                10,
                10,
                "[10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, ...]"
        );
        range_BigInteger_BigInteger_helper(10, 9, "[]");
        range_BigInteger_BigInteger_helper(
                -20,
                -10,
                "[-11, -11, -17, -18, -15, -12, -15, -17, -19, -13, -15, -17, -15, -12, -15, -19, -14, -19, -14," +
                " -15, ...]"
        );
        range_BigInteger_BigInteger_helper(
                -20,
                -20,
                "[-20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20," +
                " -20, ...]"
        );
        range_BigInteger_BigInteger_helper(-20, -21, "[]");
        range_BigInteger_BigInteger_helper(0, 0, "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...]");
        range_BigInteger_BigInteger_helper(0, 10, "[9, 9, 3, 2, 5, 8, 5, 3, 1, 7, 5, 3, 5, 8, 5, 1, 6, 1, 6, 5, ...]");
        range_BigInteger_BigInteger_helper(
                -5,
                0,
                "[-4, -4, -2, -3, 0, -5, 0, 0, -2, -4, 0, -2, 0, -5, 0, -4, -4, -1, 0, 0, ...]"
        );
        range_BigInteger_BigInteger_helper(
                -5,
                10,
                "[4, 4, -2, -3, 0, 10, 3, 0, 8, -2, 10, -4, 2, 0, -2, 0, 3, 0, -4, 1, ...]"
        );
        range_BigInteger_BigInteger_helper(
                -10,
                5,
                "[-1, -1, -7, -8, -5, 5, -2, -5, 3, -7, 5, -9, -3, -5, -7, -5, -2, -5, -9, -4, ...]"
        );
        range_BigInteger_BigInteger_helper(5, -10, "[]");
    }

    private static void range_char_char_helper(char a, char b, @NotNull String output) {
        aeqcs(P.range(a, b), output);
    }

    @Test
    public void testRange_char_char() {
        range_char_char_helper(
                'a',
                'z',
                "jjdsvyfdrhvtvyvrgpbwvvkpzexlncshjewdmfsefadxcfpostgwymkoqiyyeyotsdplrqjvsofgpjgavgtpttfdwftlszplpbd" +
                "rxgxsfvxrizclhuiwuagojhcctlgs"
        );
        range_char_char_helper(
                'a',
                'a',
                "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" +
                "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
        );
        range_char_char_helper('a', 'A', "");
        range_char_char_helper(
                '!',
                '9',
                "**$369&$2(646962'0\"766+0%8,.#3(*%7$-&3%&!$8#&0/34'79-+/1)99%9/43$0,21*63/&'0*'!6'4044&$7&4,30,0\"$" +
                "28'83&682)#,(5)75!'/*(##4,'39$8"
        );
    }

    private static void geometricHelper(
            @NotNull Iterable<Integer> xs,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean
    ) {
        aeqit(take(TINY_LIMIT, xs), output);
        aeq(topSampleCount(DEFAULT_SAMPLE_SIZE, DEFAULT_TOP_COUNT, xs), topSampleCount);
        aeq(meanOfIntegers(xs), sampleMean);
    }

    private static void positiveIntegersGeometric_helper(
            int mean,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean
    ) {
        geometricHelper(P.withScale(mean).positiveIntegersGeometric(), output, topSampleCount, sampleMean);
    }

    private static void positiveIntegersGeometric_fail_helper(int mean) {
        try {
            P.withScale(mean).positiveIntegersGeometric();
            fail();
        } catch (IllegalStateException ignored) {}
    }

    @Test
    public void testPositiveIntegersGeometric() {
        positiveIntegersGeometric_helper(
                2,
                "[1, 7, 1, 1, 2, 1, 1, 2, 2, 1, 1, 4, 1, 4, 1, 2, 1, 1, 1, 1]",
                "{1=499586, 2=249843, 3=125575, 4=62393, 5=31340, 6=15619, 7=7834, 8=3795, 9=2022, 10=985}",
                2.001270999979909
        );
        positiveIntegersGeometric_helper(
                3,
                "[9, 8, 1, 8, 1, 5, 7, 4, 1, 1, 4, 6, 2, 3, 2, 1, 2, 1, 11, 2]",
                "{1=332590, 2=222043, 3=148160, 4=99554, 5=65913, 6=43782, 7=29190, 8=19555, 9=13035, 10=8763}",
                3.004123999989902
        );
        positiveIntegersGeometric_helper(
                4,
                "[11, 10, 2, 9, 1, 6, 11, 2, 5, 2, 1, 6, 9, 2, 2, 2, 6, 2, 1, 2]",
                "{1=249744, 2=186863, 3=140438, 4=105867, 5=79524, 6=59059, 7=44851, 8=33373, 9=24866, 10=18881}",
                4.006401999990119
        );
        positiveIntegersGeometric_helper(
                5,
                "[13, 3, 1, 16, 7, 6, 8, 3, 9, 1, 3, 2, 1, 10, 2, 3, 2, 6, 20, 1]",
                "{1=200184, 2=159388, 3=127925, 4=102084, 5=82015, 6=65412, 7=52943, 8=42013, 9=33701, 10=26722}",
                5.005904000008399
        );
        positiveIntegersGeometric_helper(
                10,
                "[18, 4, 35, 12, 16, 3, 1, 14, 4, 2, 4, 36, 8, 3, 1, 13, 9, 10, 27, 24]",
                "{1=100219, 2=90434, 3=81228, 4=72922, 5=65373, 6=58780, 7=53134, 8=47805, 9=42890, 10=38722}",
                9.999642000005709
        );
        positiveIntegersGeometric_helper(
                100,
                "[202, 16, 112, 3, 47, 70, 162, 135, 12, 10, 85, 253, 64, 76, 28, 197, 24, 440, 192, 15]",
                "{1=10039, 2=9924, 4=9714, 3=9684, 5=9668, 6=9385, 7=9343, 10=9342, 9=9287, 8=9240}",
                99.85558199999846
        );
        positiveIntegersGeometric_fail_helper(1);
        positiveIntegersGeometric_fail_helper(0);
        positiveIntegersGeometric_fail_helper(-1);
    }

    private static void negativeIntegersGeometric_helper(
            int mean,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean
    ) {
        geometricHelper(P.withScale(mean).negativeIntegersGeometric(), output, topSampleCount, sampleMean);
    }

    private static void negativeIntegersGeometric_fail_helper(int mean) {
        try {
            P.withScale(mean).negativeIntegersGeometric();
            fail();
        } catch (IllegalStateException ignored) {}
    }

    @Test
    public void testNegativeIntegersGeometric() {
        negativeIntegersGeometric_helper(
                2,
                "[-1, -7, -1, -1, -2, -1, -1, -2, -2, -1, -1, -4, -1, -4, -1, -2, -1, -1, -1, -1]",
                "{-1=499586, -2=249843, -3=125575, -4=62393, -5=31340, -6=15619, -7=7834, -8=3795, -9=2022, -10=985}",
                -2.001270999979909
        );
        negativeIntegersGeometric_helper(
                3,
                "[-9, -8, -1, -8, -1, -5, -7, -4, -1, -1, -4, -6, -2, -3, -2, -1, -2, -1, -11, -2]",
                "{-1=332590, -2=222043, -3=148160, -4=99554, -5=65913, -6=43782, -7=29190, -8=19555, -9=13035," +
                " -10=8763}",
                -3.004123999989902
        );
        negativeIntegersGeometric_helper(
                4,
                "[-11, -10, -2, -9, -1, -6, -11, -2, -5, -2, -1, -6, -9, -2, -2, -2, -6, -2, -1, -2]",
                "{-1=249744, -2=186863, -3=140438, -4=105867, -5=79524, -6=59059, -7=44851, -8=33373, -9=24866," +
                " -10=18881}",
                -4.006401999990119);
        negativeIntegersGeometric_helper(
                5,
                "[-13, -3, -1, -16, -7, -6, -8, -3, -9, -1, -3, -2, -1, -10, -2, -3, -2, -6, -20, -1]",
                "{-1=200184, -2=159388, -3=127925, -4=102084, -5=82015, -6=65412, -7=52943, -8=42013, -9=33701," +
                " -10=26722}",
                -5.005904000008399
        );
        negativeIntegersGeometric_helper(
                10,
                "[-18, -4, -35, -12, -16, -3, -1, -14, -4, -2, -4, -36, -8, -3, -1, -13, -9, -10, -27, -24]",
                "{-1=100219, -2=90434, -3=81228, -4=72922, -5=65373, -6=58780, -7=53134, -8=47805, -9=42890," +
                " -10=38722}",
                -9.999642000005709
        );
        negativeIntegersGeometric_helper(
                100,
                "[-202, -16, -112, -3, -47, -70, -162, -135, -12, -10, -85, -253, -64, -76, -28, -197, -24, -440," +
                " -192, -15]",
                "{-1=10039, -2=9924, -4=9714, -3=9684, -5=9668, -6=9385, -7=9343, -10=9342, -9=9287, -8=9240}",
                -99.85558199999846
        );
        negativeIntegersGeometric_fail_helper(1);
        negativeIntegersGeometric_fail_helper(0);
        negativeIntegersGeometric_fail_helper(-1);
    }

    private static void naturalIntegersGeometric_helper(
            int mean,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean
    ) {
        geometricHelper(P.withScale(mean).naturalIntegersGeometric(), output, topSampleCount, sampleMean);
    }

    private static void naturalIntegersGeometric_fail_helper(int mean) {
        try {
            P.withScale(mean).naturalIntegersGeometric();
            fail();
        } catch (IllegalStateException ignored) {}
    }

    @Test
    public void testNaturalIntegersGeometric() {
        naturalIntegersGeometric_helper(
                1,
                "[0, 6, 0, 0, 1, 0, 0, 1, 1, 0, 0, 3, 0, 3, 0, 1, 0, 0, 0, 0]",
                "{0=499586, 1=249843, 2=125575, 3=62393, 4=31340, 5=15619, 6=7834, 7=3795, 8=2022, 9=985}",
                1.0012709999976894
        );
        naturalIntegersGeometric_helper(
                2,
                "[8, 7, 0, 7, 0, 4, 6, 3, 0, 0, 3, 5, 1, 2, 1, 0, 1, 0, 10, 1]",
                "{0=332590, 1=222043, 2=148160, 3=99554, 4=65913, 5=43782, 6=29190, 7=19555, 8=13035, 9=8763}",
                2.00412399998913
        );
        naturalIntegersGeometric_helper(
                3,
                "[10, 9, 1, 8, 0, 5, 10, 1, 4, 1, 0, 5, 8, 1, 1, 1, 5, 1, 0, 1]",
                "{0=249744, 1=186863, 2=140438, 3=105867, 4=79524, 5=59059, 6=44851, 7=33373, 8=24866, 9=18881}",
                3.0064019999914837
        );
        naturalIntegersGeometric_helper(
                4,
                "[12, 2, 0, 15, 6, 5, 7, 2, 8, 0, 2, 1, 0, 9, 1, 2, 1, 5, 19, 0]",
                "{0=200184, 1=159388, 2=127925, 3=102084, 4=82015, 5=65412, 6=52943, 7=42013, 8=33701, 9=26722}",
                4.005903999991679
        );
        naturalIntegersGeometric_helper(
                5,
                "[18, 5, 0, 18, 6, 6, 7, 3, 11, 0, 2, 1, 0, 12, 2, 2, 1, 6, 22, 0]",
                "{0=166872, 1=138557, 2=115419, 3=96674, 4=80201, 5=66947, 6=55828, 7=46360, 8=38953, 9=32591}",
                5.005902000004987
        );
        naturalIntegersGeometric_helper(
                10,
                "[18, 5, 39, 11, 15, 3, 0, 14, 4, 1, 5, 41, 7, 2, 1, 13, 9, 10, 30, 26]",
                "{0=91218, 1=82860, 2=75147, 3=68509, 4=62021, 5=56200, 6=51617, 7=46493, 8=42361, 9=38413}",
                9.999247000004416
        );
        naturalIntegersGeometric_helper(
                100,
                "[203, 15, 111, 2, 47, 69, 162, 135, 11, 9, 84, 253, 63, 75, 27, 198, 23, 445, 195, 14]",
                "{0=9946, 1=9846, 3=9594, 4=9593, 2=9541, 5=9353, 9=9285, 6=9222, 7=9184, 8=9136}",
                99.85402799999808
        );
        naturalIntegersGeometric_fail_helper(0);
        naturalIntegersGeometric_fail_helper(-1);
        naturalIntegersGeometric_fail_helper(Integer.MAX_VALUE);
    }

    private static void nonzeroIntegersGeometric_helper(
            int mean,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double sampleAbsMean
    ) {
        Iterable<Integer> xs = P.withScale(mean).nonzeroIntegersGeometric();
        geometricHelper(xs, output, topSampleCount, sampleMean);
        aeq(meanOfIntegers(map(Math::abs, xs)), sampleAbsMean);
    }

    private static void nonzeroIntegersGeometric_fail_helper(int mean) {
        try {
            P.withScale(mean).nonzeroIntegersGeometric();
            fail();
        } catch (IllegalStateException ignored) {}
    }

    @Test
    public void testNonzeroIntegersGeometric() {
        nonzeroIntegersGeometric_helper(
                2,
                "[1, -7, -1, -1, -2, -1, 1, -2, 2, -1, -1, 4, 1, -4, 1, -2, 1, 1, 1, 1]",
                "{-1=249898, 1=249688, 2=125303, -2=124540, -3=62938, 3=62637, -4=31272, 4=31121, -5=15702, 5=15638}",
                -7.849999999999725E-4,
                2.001270999979909
        );
        nonzeroIntegersGeometric_helper(
                3,
                "[9, -8, -1, -8, -1, -5, 7, -4, 1, -1, -4, 6, 2, -3, 2, -1, 2, 1, 11, 2]",
                "{-1=166430, 1=166160, 2=111199, -2=110844, -3=74215, 3=73945, 4=49795, -4=49759, -5=33107, 5=32806}",
                0.003683999999999968,
                3.004123999989902
        );
        nonzeroIntegersGeometric_helper(
                4,
                "[11, -10, -2, -9, -1, -6, 11, -2, 5, -2, -1, 6, 9, -2, 2, -2, 6, 2, 1, 2]",
                "{1=124959, -1=124785, 2=93502, -2=93361, 3=70358, -3=70080, 4=53095, -4=52772, -5=39853, 5=39671}",
                -0.0026300000000000377,
                4.006401999990119
        );
        nonzeroIntegersGeometric_helper(
                5,
                "[13, -3, -1, -16, -7, -6, 8, -3, 9, -1, -3, 2, 1, -10, 2, -3, 2, 6, 20, 1]",
                "{-1=100093, 1=100091, -2=79868, 2=79520, -3=64120, 3=63805, 4=51127, -4=50957, 5=41063, -5=40952}",
                -2.399999999976992E-5,
                5.005904000008399
        );
        nonzeroIntegersGeometric_helper(
                10,
                "[18, -4, -35, -12, -16, -3, 1, -14, 4, -2, -4, 36, 8, -3, 1, -13, 9, 10, 27, 24]",
                "{-1=50164, 1=50055, 2=45220, -2=45214, 3=40948, -3=40280, -4=36590, 4=36332, 5=32748, -5=32625}",
                -0.003792000000000025,
                9.999642000005709
        );
        nonzeroIntegersGeometric_helper(
                100,
                "[202, -16, -112, -3, -47, -70, 162, -135, 12, -10, -85, 253, 64, -76, 28, -197, 24, 440, 192, 15]",
                "{-1=5043, 1=4996, -2=4987, 2=4937, 4=4899, -3=4886, 5=4846, -5=4822, -4=4815, 3=4798}",
                -0.10534599999999866,
                99.85558199999846
        );
        nonzeroIntegersGeometric_fail_helper(1);
        nonzeroIntegersGeometric_fail_helper(0);
        nonzeroIntegersGeometric_fail_helper(-1);
    }

    private static void integersGeometric_helper(
            int mean,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double sampleAbsMean
    ) {
        Iterable<Integer> xs = P.withScale(mean).integersGeometric();
        geometricHelper(xs, output, topSampleCount, sampleMean);
        aeq(meanOfIntegers(map(Math::abs, xs)), sampleAbsMean);
    }

    private static void integersGeometric_fail_helper(int mean) {
        try {
            P.withScale(mean).integersGeometric();
            fail();
        } catch (IllegalStateException ignored) {}
    }

    @Test
    public void testIntegersGeometric() {
        integersGeometric_helper(
                1,
                "[0, -6, 0, 0, -1, 0, 0, -1, 1, 0, 0, 3, 0, -3, 0, -1, 0, 0, 0, 0]",
                "{0=499586, 1=125303, -1=124540, -2=62938, 2=62637, -3=31272, 3=31121, -4=15702, 4=15638, 5=7833}",
                -7.989999999999772E-4,
                1.0012709999976894
        );
        integersGeometric_helper(
                2,
                "[8, -7, 0, -7, 0, -4, 6, -3, 0, 0, -3, 5, 1, -2, 1, 0, 1, 0, 10, 1]",
                "{0=332590, 1=111199, -1=110844, -2=74215, 2=73945, 3=49795, -3=49759, -4=33107, 4=32806, 5=21917}",
                0.00366999999999998,
                2.00412399998913
        );
        integersGeometric_helper(
                3,
                "[10, -9, -1, -8, 0, -5, 10, -1, 4, -1, 0, 5, 8, -1, 1, -1, 5, 1, 0, 1]",
                "{0=249744, 1=93502, -1=93361, 2=70358, -2=70080, 3=53095, -3=52772, -4=39853, 4=39671, -5=29712}",
                -0.002643999999999819,
                3.0064019999914837
        );
        integersGeometric_helper(
                4,
                "[12, -2, 0, -15, -6, -5, 7, -2, 8, 0, -2, 1, 0, -9, 1, -2, 1, 5, 19, 0]",
                "{0=200184, -1=79868, 1=79520, -2=64120, 2=63805, 3=51127, -3=50957, 4=41063, -4=40952, 5=32912}",
                -3.800000000004667E-5,
                4.005903999991679
        );
        integersGeometric_helper(
                5,
                "[18, -5, 0, -18, -6, -6, 7, -3, 11, 0, -2, 1, 0, -12, 2, -2, 1, 6, 22, 0]",
                "{0=166872, -1=69305, 1=69252, -2=57833, 2=57586, 3=48546, -3=48128, 4=40224, -4=39977, 5=33493}",
                0.0032600000000001014,
                5.005902000004987
        );
        integersGeometric_helper(
                10,
                "[18, -5, -39, -11, -15, -3, 0, -14, 4, -1, -5, 41, 7, -2, 1, -13, 9, 10, 30, 26]",
                "{0=91218, -1=41471, 1=41389, 2=37575, -2=37572, -3=34463, 3=34046, 4=31124, -4=30897, -5=28351}",
                0.007937000000000064,
                9.999247000004416
        );
        integersGeometric_helper(
                100,
                "[203, -15, -111, -2, -47, -69, 162, -135, 11, -9, -84, 253, 63, -75, 27, -198, 23, 445, 195, 14]",
                "{0=9946, -1=4946, 1=4900, -3=4847, -4=4815, 2=4780, 4=4778, -2=4761, 3=4747, -9=4714}",
                -0.03164600000000099,
                99.85402799999808
        );
        integersGeometric_fail_helper(0);
        integersGeometric_fail_helper(-1);
        integersGeometric_fail_helper(Integer.MAX_VALUE);
    }

    private static void rangeUpGeometric_helper(
            int mean,
            int a,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean
    ) {
        Iterable<Integer> xs = P.withScale(mean).rangeUpGeometric(a);
        geometricHelper(xs, output, topSampleCount, sampleMean);
    }

    private static void rangeUpGeometric_fail_helper(int mean, int a) {
        try {
            P.withScale(mean).rangeUpGeometric(a);
            fail();
        } catch (IllegalStateException ignored) {}
    }

    @Test
    public void testRangeUpGeometric() {
        rangeUpGeometric_helper(
                3,
                2,
                "[2, 8, 2, 2, 3, 2, 2, 3, 3, 2, 2, 5, 2, 5, 2, 3, 2, 2, 2, 2]",
                "{2=499586, 3=249843, 4=125575, 5=62393, 6=31340, 7=15619, 8=7834, 9=3795, 10=2022, 11=985}",
                3.0012709999686917
        );
        rangeUpGeometric_helper(
                10,
                2,
                "[16, 5, 34, 13, 14, 4, 14, 5, 3, 4, 33, 9, 4, 2, 13, 9, 9, 25, 21, 19]",
                "{2=111347, 3=99487, 4=87886, 5=77801, 6=69177, 7=61498, 8=54675, 9=48450, 10=43096, 11=38588}",
                9.997693000016564
        );
        rangeUpGeometric_helper(
                11,
                10,
                "[10, 16, 10, 10, 11, 10, 10, 11, 11, 10, 10, 13, 10, 13, 10, 11, 10, 10, 10, 10]",
                "{10=499586, 11=249843, 12=125575, 13=62393, 14=31340, 15=15619, 16=7834, 17=3795, 18=2022, 19=985}",
                11.0012709998981
        );
        rangeUpGeometric_helper(
                20,
                10,
                "[28, 15, 49, 21, 25, 13, 10, 24, 14, 11, 15, 51, 17, 12, 11, 23, 19, 20, 40, 36]",
                "{10=91218, 11=82860, 12=75147, 13=68509, 14=62021, 15=56200, 16=51617, 17=46493, 18=42361, 19=38413}",
                19.999247000004008
        );
        rangeUpGeometric_helper(
                -9,
                -10,
                "[-10, -4, -10, -10, -9, -10, -10, -9, -9, -10, -10, -7, -10, -7, -10, -9, -10, -10, -10, -10]",
                "{-10=499586, -9=249843, -8=125575, -7=62393, -6=31340, -5=15619, -4=7834, -3=3795, -2=2022, -1=985}",
                -8.998728999952611
        );
        rangeUpGeometric_helper(
                0,
                -10,
                "[8, -5, 29, 1, 5, -7, -10, 4, -6, -9, -5, 31, -3, -8, -9, 3, -1, 0, 20, 16]",
                "{-10=91218, -9=82860, -8=75147, -7=68509, -6=62021, -5=56200, -4=51617, -3=46493, -2=42361," +
                " -1=38413}",
                -7.529999999969168E-4
        );
        rangeUpGeometric_helper(
                Integer.MAX_VALUE,
                Integer.MAX_VALUE - 1,
                "[2147483646, 2147483646, 2147483646, 2147483647, 2147483646, 2147483646, 2147483647, 2147483647," +
                " 2147483646, 2147483646, 2147483646, 2147483646, 2147483647, 2147483646, 2147483646, 2147483646," +
                " 2147483646, 2147483647, 2147483646, 2147483646]",
                "{2147483646=666780, 2147483647=333220}",
                2.1474836463257434E9
        );
        rangeUpGeometric_helper(
                Integer.MIN_VALUE + 1,
                Integer.MIN_VALUE,
                "[-2147483648, -2147483642, -2147483648, -2147483648, -2147483647, -2147483648, -2147483648," +
                " -2147483647, -2147483647, -2147483648, -2147483648, -2147483645, -2147483648, -2147483645," +
                " -2147483648, -2147483647, -2147483648, -2147483648, -2147483648, -2147483648]",
                "{-2147483648=499586, -2147483647=249843, -2147483646=125575, -2147483645=62393, -2147483644=31340," +
                " -2147483643=15619, -2147483642=7834, -2147483641=3795, -2147483640=2022, -2147483639=985}",
                -2.1474836470144925E9
        );
        rangeUpGeometric_fail_helper(5, 5);
        rangeUpGeometric_fail_helper(4, 5);
        rangeUpGeometric_fail_helper(Integer.MAX_VALUE - 5, -10);
    }

    private static void rangeDownGeometric_helper(
            int mean,
            int a,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean
    ) {
        Iterable<Integer> xs = P.withScale(mean).rangeDownGeometric(a);
        geometricHelper(xs, output, topSampleCount, sampleMean);
    }

    private static void rangeDownGeometric_fail_helper(int mean, int a) {
        try {
            P.withScale(mean).rangeDownGeometric(a);
            fail();
        } catch (IllegalStateException ignored) {}
    }

    @Test
    public void testRangeDownGeometric() {
        rangeDownGeometric_helper(
                0,
                2,
                "[-6, -5, 2, -5, 2, -2, -4, -1, 2, 2, -1, -3, 1, 0, 1, 2, 1, 2, -8, 1]",
                "{2=332590, 1=222043, 0=148160, -1=99554, -2=65913, -3=43782, -4=29190, -5=19555, -6=13035, -7=8763}",
                -0.0041239999999897305
        );
        rangeDownGeometric_helper(
                -5,
                2,
                "[-23, -6, 2, -25, -8, -9, -10, -2, -17, 2, -2, 2, 1, 1, 1, -16, -2, -2, 1, -7]",
                "{2=125706, 1=108799, 0=95696, -1=83650, -2=73364, -3=63977, -4=56311, -5=48855, -6=42928, -7=37491}",
                -5.0047379999951955
        );
        rangeDownGeometric_helper(
                5,
                10,
                "[-8, 5, 10, -8, 4, 4, 3, 7, -1, 10, 8, 9, 10, -2, 8, 8, 9, 4, -12, 10]",
                "{10=166872, 9=138557, 8=115419, 7=96674, 6=80201, 5=66947, 4=55828, 3=46360, 2=38953, 1=32591}",
                4.994097999991622
        );
        rangeDownGeometric_helper(
                0,
                10,
                "[-8, 5, -29, -1, -5, 7, 10, -4, 6, 9, 5, -31, 3, 8, 9, -3, 1, 0, -20, -16]",
                "{10=91218, 9=82860, 8=75147, 7=68509, 6=62021, 5=56200, 4=51617, 3=46493, 2=42361, 1=38413}",
                7.529999999969168E-4
        );
        rangeDownGeometric_helper(
                -11,
                -10,
                "[-10, -16, -10, -10, -11, -10, -10, -11, -11, -10, -10, -13, -10, -13, -10, -11, -10, -10, -10, -10]",
                "{-10=499586, -11=249843, -12=125575, -13=62393, -14=31340, -15=15619, -16=7834, -17=3795, -18=2022," +
                " -19=985}",
                -11.0012709998981
        );
        rangeDownGeometric_helper(
                -20,
                -10,
                "[-28, -15, -49, -21, -25, -13, -10, -24, -14, -11, -15, -51, -17, -12, -11, -23, -19, -20, -40, -36]",
                "{-10=91218, -11=82860, -12=75147, -13=68509, -14=62021, -15=56200, -16=51617, -17=46493, -18=42361," +
                " -19=38413}",
                -19.999247000004008
        );
        rangeDownGeometric_helper(
                Integer.MAX_VALUE - 1,
                Integer.MAX_VALUE,
                "[2147483647, 2147483641, 2147483647, 2147483647, 2147483646, 2147483647, 2147483647, 2147483646," +
                " 2147483646, 2147483647, 2147483647, 2147483644, 2147483647, 2147483644, 2147483647, 2147483646," +
                " 2147483647, 2147483647, 2147483647, 2147483647]",
                "{2147483647=499586, 2147483646=249843, 2147483645=125575, 2147483644=62393, 2147483643=31340," +
                " 2147483642=15619, 2147483641=7834, 2147483640=3795, 2147483639=2022, 2147483638=985}",
                2.1474836460132644E9
        );
        rangeDownGeometric_helper(
                Integer.MIN_VALUE,
                Integer.MIN_VALUE + 1,
                "[-2147483647, -2147483647, -2147483647, -2147483648, -2147483647, -2147483647, -2147483648," +
                " -2147483648, -2147483647, -2147483647, -2147483647, -2147483647, -2147483648, -2147483647," +
                " -2147483647, -2147483647, -2147483647, -2147483648, -2147483647, -2147483647]",
                "{-2147483647=666780, -2147483648=333220}",
                -2.1474836473717155E9
        );
        rangeDownGeometric_fail_helper(5, 5);
        rangeDownGeometric_fail_helper(6, 5);
        rangeDownGeometric_fail_helper(-5, Integer.MIN_VALUE);
    }

    private static void bigIntegerHelper(
            @NotNull Iterable<BigInteger> xs,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        aeqit(take(TINY_LIMIT, xs), output);
        aeq(topSampleCount(DEFAULT_SAMPLE_SIZE, DEFAULT_TOP_COUNT, xs), topSampleCount);
        aeq(meanOfBigIntegers(xs), sampleMean);
        aeq(meanOfIntegers(map(x -> x.abs().bitLength(), xs)), bitSizeMean);
    }

    private void positiveBigIntegers_helper(
            int meanBitSize,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        bigIntegerHelper(
                P.withScale(meanBitSize).positiveBigIntegers(),
                output,
                topSampleCount,
                sampleMean,
                bitSizeMean
        );
    }

    private void positiveBigIntegers_fail_helper(int meanBitSize) {
        try {
            P.withScale(meanBitSize).positiveBigIntegers();
            fail();
        } catch (IllegalStateException ignored) {}
    }

    @Test
    public void testPositiveBigIntegers() {
        positiveBigIntegers_helper(
                2,
                "[3, 3, 1, 1, 5, 3, 2, 5, 1, 128, 3, 1, 7, 3, 19, 3, 1, 1, 1, 1]",
                "{1=500207, 3=125275, 2=124965, 4=31273, 7=31257, 6=31210, 5=31060, 15=7859, 14=7856, 12=7825}",
                13.200384999910318,
                1.9997689999799513
        );
        positiveBigIntegers_helper(
                3,
                "[1, 73, 1, 50, 3, 7, 293, 13, 13, 1, 1, 1, 1, 53, 11, 5, 4, 21, 5, 6]",
                "{1=333267, 2=110960, 3=110841, 4=37215, 6=37184, 7=37049, 5=36757, 11=12538, 13=12513, 14=12475}",
                26840.94323814885,
                3.001105999989808
        );
        positiveBigIntegers_helper(
                4,
                "[3, 73, 1, 114, 3, 31, 6181, 1, 5, 384, 127, 1, 1, 1, 1, 1, 1, 3, 186, 38]",
                "{1=249340, 3=93955, 2=93935, 7=35540, 6=35172, 4=34852, 5=34829, 12=13307, 15=13291, 11=13252}",
                3.5033250156902015E8,
                4.003457999990124
        );
        positiveBigIntegers_helper(
                5,
                "[1, 1489, 1, 1, 3, 322, 140795, 37, 1, 99, 31, 49, 7, 21, 51, 221, 6318, 1, 5, 38]",
                "{1=200704, 3=79851, 2=79702, 5=32039, 4=32003, 7=31966, 6=31854, 11=12919, 15=12878, 10=12851}",
                5.557443900260981E13,
                4.995587000008505
        );
        positiveBigIntegers_helper(
                10,
                "[218711, 41, 32642009586, 771, 127, 56, 21, 8231472, 9088, 7, 508, 3, 1, 11, 53, 120, 13789, 954," +
                " 6, 7]",
                "{1=100432, 3=45014, 2=44724, 4=20471, 6=20321, 5=20285, 7=20215, 15=9259, 9=9172, 14=9129}",
                6.340951245889718E33,
                9.98246600000578
        );
        positiveBigIntegers_helper(
                100,
                "[467390254126492304515, 806468037686895848602617292856, 21, 115458554839698039," +
                " 110171092200099679759747368322120081992944221770299725723040888748643805, 113, 50097358," +
                " 31333287393, 4317708541673843757007969112638, 58603921325947, 14638480457312, 30903206095393, 1," +
                " 10546370772476821203833394576192231840113649197367993333141339714," +
                " 8252508914833387043595747231257074818, 10790884350097690876516459618440133215689590534850026," +
                " 5414710165764205985443737745492459602208265998825902299228580907397621639942371280437038," +
                " 288262726134830811600474241, 1742, 9539261]",
                "{1=9909, 3=4936, 2=4932, 7=2475, 5=2471, 6=2414, 4=2402, 15=1287, 13=1251, 8=1250}",
                Double.POSITIVE_INFINITY,
                99.98696499999937
        );
        positiveBigIntegers_fail_helper(1);
        positiveBigIntegers_fail_helper(0);
        positiveBigIntegers_fail_helper(-1);
    }

    private void negativeBigIntegers_helper(
            int meanBitSize,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        bigIntegerHelper(
                P.withScale(meanBitSize).negativeBigIntegers(),
                output,
                topSampleCount,
                sampleMean,
                bitSizeMean
        );
    }

    private void negativeBigIntegers_fail_helper(int meanBitSize) {
        try {
            P.withScale(meanBitSize).negativeBigIntegers();
            fail();
        } catch (IllegalStateException ignored) {}
    }

    @Test
    public void testNegativeBigIntegers() {
        negativeBigIntegers_helper(
                2,
                "[-3, -3, -1, -1, -5, -3, -2, -5, -1, -128, -3, -1, -7, -3, -19, -3, -1, -1, -1, -1]",
                "{-1=500207, -3=125275, -2=124965, -4=31273, -7=31257, -6=31210, -5=31060, -15=7859, -14=7856," +
                " -12=7825}",
                -13.200384999910318,
                1.9997689999799513
        );
        negativeBigIntegers_helper(
                3,
                "[-1, -73, -1, -50, -3, -7, -293, -13, -13, -1, -1, -1, -1, -53, -11, -5, -4, -21, -5, -6]",
                "{-1=333267, -2=110960, -3=110841, -4=37215, -6=37184, -7=37049, -5=36757, -11=12538, -13=12513," +
                " -14=12475}",
                -26840.94323814885,
                3.001105999989808
        );
        negativeBigIntegers_helper(
                4,
                "[-3, -73, -1, -114, -3, -31, -6181, -1, -5, -384, -127, -1, -1, -1, -1, -1, -1, -3, -186, -38]",
                "{-1=249340, -3=93955, -2=93935, -7=35540, -6=35172, -4=34852, -5=34829, -12=13307, -15=13291," +
                " -11=13252}",
                -3.5033250156902015E8,
                4.003457999990124
        );
        negativeBigIntegers_helper(
                5,
                "[-1, -1489, -1, -1, -3, -322, -140795, -37, -1, -99, -31, -49, -7, -21, -51, -221, -6318, -1, -5," +
                " -38]",
                "{-1=200704, -3=79851, -2=79702, -5=32039, -4=32003, -7=31966, -6=31854, -11=12919, -15=12878," +
                " -10=12851}",
                -5.557443900260981E13,
                4.995587000008505
        );
        negativeBigIntegers_helper(
                10,
                "[-218711, -41, -32642009586, -771, -127, -56, -21, -8231472, -9088, -7, -508, -3, -1, -11, -53," +
                " -120, -13789, -954, -6, -7]",
                "{-1=100432, -3=45014, -2=44724, -4=20471, -6=20321, -5=20285, -7=20215, -15=9259, -9=9172, -14=9129}",
                -6.340951245889718E33,
                9.98246600000578
        );
        negativeBigIntegers_helper(
                100,
                "[-467390254126492304515, -806468037686895848602617292856, -21, -115458554839698039," +
                " -110171092200099679759747368322120081992944221770299725723040888748643805, -113, -50097358," +
                " -31333287393, -4317708541673843757007969112638, -58603921325947, -14638480457312, -30903206095393," +
                " -1, -10546370772476821203833394576192231840113649197367993333141339714," +
                " -8252508914833387043595747231257074818, -10790884350097690876516459618440133215689590534850026," +
                " -5414710165764205985443737745492459602208265998825902299228580907397621639942371280437038," +
                " -288262726134830811600474241, -1742, -9539261]",
                "{-1=9909, -3=4936, -2=4932, -7=2475, -5=2471, -6=2414, -4=2402, -15=1287, -13=1251, -8=1250}",
                Double.NEGATIVE_INFINITY,
                99.98696499999937
        );
        negativeBigIntegers_fail_helper(1);
        negativeBigIntegers_fail_helper(0);
        negativeBigIntegers_fail_helper(-1);
    }

    private void naturalBigIntegers_helper(
            int meanBitSize,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        bigIntegerHelper(
                P.withScale(meanBitSize).naturalBigIntegers(),
                output,
                topSampleCount,
                sampleMean,
                bitSizeMean
        );
    }

    private void naturalBigIntegers_fail_helper(int meanBitSize) {
        try {
            P.withScale(meanBitSize).naturalBigIntegers();
            fail();
        } catch (IllegalStateException ignored) {}
    }

    @Test
    public void testNaturalBigIntegers() {
        naturalBigIntegers_helper(
                1,
                "[1, 1, 0, 0, 3, 1, 1, 3, 0, 99, 1, 0, 3, 1, 11, 1, 0, 0, 0, 0]",
                "{0=500207, 1=250240, 2=62483, 3=62317, 6=15618, 4=15610, 7=15547, 5=15449, 8=3991, 11=3928}",
                6.229866000028782,
                0.9997689999977443
        );
        naturalBigIntegers_helper(
                2,
                "[0, 41, 0, 18, 1, 3, 165, 5, 5, 0, 0, 0, 0, 21, 7, 3, 2, 13, 3, 2]",
                "{0=333267, 1=221801, 2=74242, 3=73963, 7=24972, 5=24712, 6=24681, 4=24632, 13=8293, 9=8280}",
                13609.52042305197,
                2.0011059999890692
        );
        naturalBigIntegers_helper(
                3,
                "[1, 41, 0, 50, 1, 15, 2085, 0, 3, 128, 63, 0, 0, 0, 0, 0, 0, 1, 113, 22]",
                "{0=249340, 1=187890, 2=70253, 3=70140, 7=26526, 4=26442, 6=26348, 5=26221, 13=10065, 14=10050}",
                1.9079275509322762E8,
                3.0034579999915354
        );
        naturalBigIntegers_helper(
                4,
                "[0, 977, 0, 0, 1, 194, 75259, 21, 0, 35, 15, 17, 3, 13, 19, 117, 2222, 0, 3, 22]",
                "{0=200704, 1=159553, 3=64118, 2=63744, 7=25808, 4=25768, 5=25501, 6=25497, 12=10389, 11=10313}",
                2.633210732213837E13,
                3.995586999991486
        );
        naturalBigIntegers_helper(
                5,
                "[1, 53536, 3, 0, 1, 834, 140795, 21, 0, 384, 63, 49, 3, 21, 51, 117, 6318, 1, 5, 22]",
                "{0=167721, 1=138701, 2=57463, 3=57419, 4=24335, 6=24250, 7=24152, 5=24008, 9=10249, 10=10111}",
                1.06285119042313808E17,
                4.992236000004956
        );
        naturalBigIntegers_helper(
                10,
                "[87639, 25, 84181617138, 259, 63, 165, 13, 10105073, 9088, 3, 508, 1, 1, 11, 21, 120, 21981, 954," +
                " 2, 7]",
                "{0=91250, 1=82539, 2=37783, 3=37767, 6=17149, 4=17085, 5=16888, 7=16769, 14=7900, 11=7761}",
                7.640939617654411E39,
                9.982282000004366
        );
        naturalBigIntegers_helper(
                100,
                "[467390254126492304515, 806468037686895848602617292856, 13, 43400960801770103," +
                " 220599033748748700358703462118552489232161965325025910605641276329432541, 49, 33320142," +
                " 14153418209, 1782407341217384954014562701886, 23419549237115, 5842387435104, 66087578184225, 0," +
                " 23710407231046469541073148036651035879975536122436632239930211906," +
                " 8252508914833387043595747231257074818, 4804573643590312523554166543634237967178890838820330," +
                " 9393296057042499122686795730667026323011915205204684038752292722542897616042638284701486," +
                " 112347201678510066930782544, 718, 7999886]",
                "{0=9820, 1=9769, 2=4852, 3=4805, 6=2455, 5=2430, 4=2420, 7=2384, 15=1222, 11=1213}",
                Double.POSITIVE_INFINITY,
                99.98700299999821
        );
        naturalBigIntegers_fail_helper(0);
        naturalBigIntegers_fail_helper(-1);
    }

    private void nonzeroBigIntegers_helper(
            int meanBitSize,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        bigIntegerHelper(
                P.withScale(meanBitSize).nonzeroBigIntegers(),
                output,
                topSampleCount,
                sampleMean,
                bitSizeMean
        );
    }

    private void nonzeroBigIntegers_fail_helper(int meanBitSize) {
        try {
            P.withScale(meanBitSize).nonzeroBigIntegers();
            fail();
        } catch (IllegalStateException ignored) {}
    }

    @Test
    public void testNonzeroBigIntegers() {
        nonzeroBigIntegers_helper(
                2,
                "[3, 3, -1, -1, -5, -3, -2, -5, 1, 128, -3, 1, -7, 3, -19, -3, -1, -1, 1, 1]",
                "{-1=250447, 1=249760, -3=63070, -2=62664, 2=62301, 3=62205, 7=15789, -4=15750, -6=15677, -5=15644}",
                -0.3831649999999957,
                1.9997689999799513
        );
        nonzeroBigIntegers_helper(
                3,
                "[1, 73, -1, -50, -3, -7, -293, -13, 13, 1, -1, 1, -1, 53, -11, -5, -4, -21, 5, 6]",
                "{-1=166880, 1=166387, -2=55502, 2=55458, -3=55439, 3=55402, -4=18729, -6=18670, -7=18570, 6=18514}",
                -3897.078362000134,
                3.001105999989808
        );
        nonzeroBigIntegers_helper(
                4,
                "[3, 73, -1, -114, -3, -31, -6181, -1, 5, 384, -127, 1, -1, 1, -1, -1, -1, -3, 186, 38]",
                "{-1=125034, 1=124306, -3=47304, -2=47115, 2=46820, 3=46651, -7=17826, 7=17714, -6=17690, 5=17551}",
                -3.225227134109898E7,
                4.003457999990124
        );
        nonzeroBigIntegers_helper(
                5,
                "[1, 1489, -1, -1, -3, -322, -140795, -37, 1, 99, -31, 49, -7, 21, -51, -221, -6318, -1, 5, 38]",
                "{-1=100514, 1=100190, -3=39969, -2=39907, 3=39882, 2=39795, -6=16121, -5=16097, -7=16073, 4=16016}",
                5.5168478051521125E13,
                4.995587000008505
        );
        nonzeroBigIntegers_helper(
                10,
                "[218711, 41, -32642009586, -771, -127, -56, -21, -8231472, 9088, 7, -508, 3, -1, 11, -53, -120," +
                " -13789, -954, 6, 7]",
                "{-1=50423, 1=50009, -3=22590, 3=22424, 2=22416, -2=22308, -4=10247, 4=10224, -5=10210, -6=10187}",
                -6.33592951661716E33,
                9.98246600000578
        );
        nonzeroBigIntegers_helper(
                100,
                "[467390254126492304515, 806468037686895848602617292856, -21, -115458554839698039," +
                " -110171092200099679759747368322120081992944221770299725723040888748643805, -113, -50097358," +
                " -31333287393, 4317708541673843757007969112638, 58603921325947, -14638480457312, 30903206095393," +
                " -1, 10546370772476821203833394576192231840113649197367993333141339714," +
                " -8252508914833387043595747231257074818, -10790884350097690876516459618440133215689590534850026," +
                " -5414710165764205985443737745492459602208265998825902299228580907397621639942371280437038," +
                " -288262726134830811600474241, 1742, 9539261]",
                "{1=4978, -1=4931, 3=2486, -2=2479, 2=2453, -3=2450, -5=1254, 7=1242, -7=1233, 5=1217}",
                Double.NaN,
                99.98696499999937
        );
        nonzeroBigIntegers_fail_helper(1);
        nonzeroBigIntegers_fail_helper(0);
        nonzeroBigIntegers_fail_helper(-1);
    }

    private void bigIntegers_helper(
            int meanBitSize,
            @NotNull String output,
            @NotNull String topSampleCount,
            double sampleMean,
            double bitSizeMean
    ) {
        bigIntegerHelper(
                P.withScale(meanBitSize).bigIntegers(),
                output,
                topSampleCount,
                sampleMean,
                bitSizeMean
        );
    }

    private void bigIntegers_fail_helper(int meanBitSize) {
        try {
            P.withScale(meanBitSize).bigIntegers();
            fail();
        } catch (IllegalStateException ignored) {}
    }

    @Test
    public void testBigIntegers() {
        bigIntegers_helper(
                1,
                "[1, 1, 0, 0, -3, -1, -1, -3, 0, 99, -1, 0, -3, 1, -11, -1, 0, 0, 0, 0]",
                "{0=500207, -1=125734, 1=124506, -2=31427, 3=31205, -3=31112, 2=31056, -7=7857, -6=7853, -4=7846}",
                -0.03709200000000307,
                0.9997689999977443
        );
        bigIntegers_helper(
                2,
                "[0, 41, 0, -18, -1, -3, -165, -5, 5, 0, 0, 0, 0, 21, -7, -3, -2, -13, 3, 2]",
                "{0=333267, -1=110941, 1=110860, -2=37249, -3=37166, 2=36993, 3=36797, -7=12693, 5=12395, -4=12368}",
                -1745.3728710001376,
                2.0011059999890692
        );
        bigIntegers_helper(
                3,
                "[1, 41, 0, -50, -1, -15, -2085, 0, 3, 128, -63, 0, 0, 0, 0, 0, 0, -1, 113, 22]",
                "{0=249340, -1=94419, 1=93471, 2=35216, -3=35103, -2=35037, -7=13327, -5=13286, -4=13246, 6=13199}",
                -1.5052708906591397E7,
                3.0034579999915354
        );
        bigIntegers_helper(
                4,
                "[0, 977, 0, 0, -1, -194, -75259, -21, 0, 35, -15, 17, -3, 13, -19, -117, -2222, 0, 3, 22]",
                "{0=200704, -1=79876, 1=79677, -3=32263, -2=32015, 3=31855, 2=31729, -7=12982, -4=12950, 7=12826}",
                2.6101431264939883E13,
                3.995586999991486
        );
        bigIntegers_helper(
                5,
                "[1, 53536, -3, 0, -1, -834, -140795, -21, 0, 384, -63, 49, -3, 21, -51, -117, -6318, -1, 5, 22]",
                "{0=167721, -1=69765, 1=68936, -3=28993, -2=28879, 2=28584, 3=28426, 4=12202, -6=12198, 7=12160}",
                1.03254056873778896E17,
                4.992236000004956
        );
        bigIntegers_helper(
                10,
                "[87639, 25, -84181617138, -259, -63, -165, -13, -10105073, 9088, 3, -508, 1, -1, 11, -21, -120," +
                " -21981, -954, 2, 7]",
                "{0=91250, -1=41322, 1=41217, -3=19029, 2=18754, 3=18738, -6=8654, -4=8589, -5=8498, 4=8496}",
                7.640932412321896E39,
                9.982282000004366
        );
        bigIntegers_helper(
                100,
                "[467390254126492304515, 806468037686895848602617292856, -13, -43400960801770103," +
                " -220599033748748700358703462118552489232161965325025910605641276329432541, -49, -33320142," +
                " -14153418209, 1782407341217384954014562701886, 23419549237115, -5842387435104, 66087578184225, 0," +
                " 23710407231046469541073148036651035879975536122436632239930211906," +
                " -8252508914833387043595747231257074818, -4804573643590312523554166543634237967178890838820330," +
                " -9393296057042499122686795730667026323011915205204684038752292722542897616042638284701486," +
                " -112347201678510066930782544, 718, 7999886]",
                "{0=9820, -1=4885, 1=4884, 3=2446, -2=2437, 2=2415, -3=2359, -5=1232, -6=1230, 4=1226}",
                Double.NaN,
                99.98700299999821
        );
        bigIntegers_fail_helper(0);
        bigIntegers_fail_helper(-1);
    }

    @Test
    @Ignore
    public void testPositiveOrdinaryFloats() {
        aeqit(take(TINY_LIMIT, P.positiveOrdinaryFloats()),
                "[1.89613015E10, 1.1960635E-14, 3.3527607E-4, 5.655431E-37, 3.614718E-15, 2.0566479E-25," +
                " 2.9515041E16, 4.02697717E15, 29027.99, 12970.511, 4.78944453E14, 6.62682E-27, 2.6460455E-35," +
                " 66049.98, 8.7866956E17, 5.9178722E-21, 5.2186357E-27, 5.710558E33, 1.7919747E36, 5.174596E-35]");
    }

    @Test
    @Ignore
    public void testNegativeOrdinaryFloats() {
        aeqit(take(TINY_LIMIT, P.negativeOrdinaryFloats()),
                "[-1.89613015E10, -1.1960635E-14, -3.3527607E-4, -5.655431E-37, -3.614718E-15, -2.0566479E-25," +
                " -2.9515041E16, -4.02697717E15, -29027.99, -12970.511, -4.78944453E14, -6.62682E-27," +
                " -2.6460455E-35, -66049.98, -8.7866956E17, -5.9178722E-21, -5.2186357E-27, -5.710558E33," +
                " -1.7919747E36, -5.174596E-35]");
    }

    @Test
    @Ignore
    public void testOrdinaryFloats() {
        aeqit(take(TINY_LIMIT, P.ordinaryFloats()),
                "[-1.89613015E10, -1.1960635E-14, -3.3527607E-4, 5.655431E-37, -3.614718E-15, -2.0566479E-25," +
                " 2.9515041E16, -4.02697717E15, 29027.99, 12970.511, 4.78944453E14, 6.62682E-27, -2.6460455E-35," +
                " -66049.98, -8.7866956E17, -5.9178722E-21, 5.2186357E-27, -5.710558E33, 1.7919747E36, 5.174596E-35]");
    }

    @Test
    @Ignore
    public void testFloats() {
        aeqit(take(TINY_LIMIT, P.floats()),
                "[-1.89613015E10, -1.1960635E-14, -3.3527607E-4, 5.655431E-37, -3.614718E-15, -2.0566479E-25," +
                " 2.9515041E16, -4.02697717E15, 29027.99, 12970.511, 4.78944453E14, 6.62682E-27, -2.6460455E-35," +
                " -66049.98, -8.7866956E17, -5.9178722E-21, 5.2186357E-27, -5.710558E33, 1.7919747E36, 5.174596E-35]");
    }

    @Test
    @Ignore
    public void testPositiveOrdinaryDoubles() {
        aeqit(take(TINY_LIMIT, P.positiveOrdinaryDoubles()),
                "[1.0846552561567438E80, 2.38197354700265E-114, 5.149568405861E-293, 2.4985843477357602E-200," +
                " 4.3189997713962425E122, 4.225116780176157E30, 2.860204612775291E-212, 2.8252505782194046E36," +
                " 8.566220677325717E-165, 7.422984534814424E267, 3.60536199254296E-277, 1.2019415773498463E252," +
                " 4.813417096972919E-51, 1.3135493453396428E-126, 1.4224921830272466E88, 1.4069651251380964E77," +
                " 2.1879373410803317E-265, 3.027783021197556E-242, 1.1079692399020062E285, 4.408373100689709E-147]");
    }

    @Test
    @Ignore
    public void testNegativeOrdinaryDoubles() {
        aeqit(take(TINY_LIMIT, P.negativeOrdinaryDoubles()),
                "[-1.0846552561567438E80, -2.38197354700265E-114, -5.149568405861E-293, -2.4985843477357602E-200," +
                " -4.3189997713962425E122, -4.225116780176157E30, -2.860204612775291E-212, -2.8252505782194046E36," +
                " -8.566220677325717E-165, -7.422984534814424E267, -3.60536199254296E-277, -1.2019415773498463E252," +
                " -4.813417096972919E-51, -1.3135493453396428E-126, -1.4224921830272466E88, -1.4069651251380964E77," +
                " -2.1879373410803317E-265, -3.027783021197556E-242, -1.1079692399020062E285," +
                " -4.408373100689709E-147]");
    }

    @Test
    @Ignore
    public void testOrdinaryDoubles() {
        aeqit(take(TINY_LIMIT, P.ordinaryDoubles()),
                "[-1.0846552561567438E80, -2.38197354700265E-114, 5.149568405861E-293, -2.4985843477357602E-200," +
                " -4.3189997713962425E122, 4.225116780176157E30, 2.860204612775291E-212, -2.8252505782194046E36," +
                " -8.566220677325717E-165, -7.422984534814424E267, 3.60536199254296E-277, 1.2019415773498463E252," +
                " 4.813417096972919E-51, 1.3135493453396428E-126, -1.4224921830272466E88, 1.4069651251380964E77," +
                " -2.1879373410803317E-265, -3.027783021197556E-242, -1.1079692399020062E285," +
                " 4.408373100689709E-147]");
    }

    @Test
    @Ignore
    public void testDoubles() {
        aeqit(take(TINY_LIMIT, P.doubles()),
                "[-1.0846552561567438E80, -2.38197354700265E-114, 5.149568405861E-293, -2.4985843477357602E-200," +
                " -4.3189997713962425E122, 4.225116780176157E30, 2.860204612775291E-212, -2.8252505782194046E36," +
                " -8.566220677325717E-165, -7.422984534814424E267, 3.60536199254296E-277, 1.2019415773498463E252," +
                " 4.813417096972919E-51, 1.3135493453396428E-126, -1.4224921830272466E88, 1.4069651251380964E77," +
                " -2.1879373410803317E-265, -3.027783021197556E-242, -1.1079692399020062E285," +
                " 4.408373100689709E-147]");
    }

    @Test
    public void testEquals() {
        List<RandomProvider> xs = Arrays.asList(
                P,
                new RandomProvider(toList(replicate(256, 0))).withScale(3).withSecondaryScale(0),
                new RandomProvider(toList(IterableUtils.range(1, 256))).withScale(0).withSecondaryScale(10)
        );
        List<RandomProvider> ys = Arrays.asList(
                P,
                new RandomProvider(toList(replicate(256, 0))).withScale(3).withSecondaryScale(0),
                new RandomProvider(toList(IterableUtils.range(1, 256))).withScale(0).withSecondaryScale(10)
        );
        testEqualsHelper(xs, ys);
        //noinspection EqualsBetweenInconvertibleTypes
        assertFalse(P.equals("hello"));
    }

    @Test
    public void testHashCode() {
        aeq(P.hashCode(), -899781048);
        aeq(
                new RandomProvider(toList(replicate(256, 0))).withScale(3).withSecondaryScale(0).hashCode(),
                -1064967138
        );
        aeq(
                new RandomProvider(toList(IterableUtils.range(1, 256))).withScale(0).withSecondaryScale(10).hashCode(),
                1365562443
        );
    }

    @Test
    public void testToString() {
        aeq(P, "RandomProvider[@-1084795351, 32, 8]");
        aeq(
                new RandomProvider(toList(replicate(256, 0))).withScale(3).withSecondaryScale(0),
                "RandomProvider[@405143795, 3, 0]"
        );
        aeq(
                new RandomProvider(toList(IterableUtils.range(1, 256))).withScale(0).withSecondaryScale(10),
                "RandomProvider[@87945096, 0, 10]"
        );
    }

    private static double meanOfIntegers(@NotNull Iterable<Integer> xs) {
        return sumDouble(map(i -> (double) i / DEFAULT_SAMPLE_SIZE, take(DEFAULT_SAMPLE_SIZE, xs)));
    }

    private static double meanOfBigIntegers(@NotNull Iterable<BigInteger> xs) {
        return sumDouble(map(i -> i.doubleValue() / DEFAULT_SAMPLE_SIZE, take(DEFAULT_SAMPLE_SIZE, xs)));
    }

    private static @NotNull List<Integer> readIntegerList(@NotNull String s) {
        return Readers.readList(Readers::readInteger).apply(s).get();
    }

    private static @NotNull List<Integer> readIntegerListWithNulls(@NotNull String s) {
        return Readers.readListWithNulls(Readers::readInteger).apply(s).get();
    }
}
// @formatter:on
